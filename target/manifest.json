{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v3.json", "dbt_version": "0.21.0", "generated_at": "2021-11-13T02:21:12.379815Z", "invocation_id": "527bbe3e-6410-422a-8dd7-f58b594a0958", "env": {}, "project_id": "7722c6428158568b9b69a64482d76c0e", "user_id": "f5eaf352-71d7-4813-a63c-b94e3ed68cb7", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.adventureworks_dw.dim_production": {"raw_sql": "{{ config(materialized='table') }}\r\n\r\nwith\r\n    prod_product as (\r\n        select *\r\n        from {{ref('stg_production_product')}}\r\n    ), \r\n\r\n    prod_productcategory as (\r\n        select *\r\n        from{{ref('stg_production_productcategory')}}\r\n    ),\r\n\r\n    prod_productsubcategory as (\r\n        select *\r\n        from{{ref('stg_production_productsubcategory')}}\r\n    ),\r\n\r\n    merged as (\r\n        select \r\n            row_number() over (order by prod.productid) as production_sk -- auto-incremental surrogate key\r\n            , prod.productid\r\n            , prod.name as product_name\r\n            , prod.makeflag\r\n            , prod.finishedgoodsflag\r\n            , prod.safetystocklevel\r\n            , prod.reorderpoint\r\n            , prod.standardcost\r\n            , prod.listprice\r\n            , prod.daystomanufacture\r\n            , prod.productline\r\n            , prod.class\r\n            , prod.productsubcategoryid\r\n            , prod.productmodelid\r\n            , prod.sellstartdate\r\n            , prod.sellenddate\r\n            , prod.discontinueddate\r\n            , prod_sub_cat.productcategoryid\r\n            , prod_sub_cat.name as product_subcategory_name\r\n            , prod_cat.name as product_category_name\r\n\r\n        from prod_product prod\r\n        left join prod_productsubcategory prod_sub_cat on prod.productsubcategoryid = prod_sub_cat.productsubcategoryid\r\n        left join prod_productcategory prod_cat on prod_sub_cat.productcategoryid = prod_cat.productcategoryid\r\n    )\r\n\r\nselect * from merged", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["model.adventureworks_dw.stg_production_product", "model.adventureworks_dw.stg_production_productcategory", "model.adventureworks_dw.stg_production_productsubcategory"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "mart", "dim_production"], "unique_id": "model.adventureworks_dw.dim_production", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/mart/dim_production.sql", "original_file_path": "models/adventureworks/mart/dim_production.sql", "name": "dim_production", "alias": "dim_production", "checksum": {"name": "sha256", "checksum": "b168c2016c3e01a3f335f70a0cf08694cd42de34df404f586f0ab87fd8c5db01"}, "tags": [], "refs": [["stg_production_product"], ["stg_production_productcategory"], ["stg_production_productsubcategory"]], "sources": [], "description": "A tabela de dim_production", "columns": {"transactionid": {"name": "transactionid", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "adventureworks_dw://models/adventureworks/mart/schemas.yml", "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/mart/dim_production.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/mart/dim_production.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1636770073, "compiled_sql": "\n\nwith\n    prod_product as (\n        select *\n        from `woven-passkey-328019`.`dbt_vbruninhu`.`stg_production_product`\n    ), \n\n    prod_productcategory as (\n        select *\n        from`woven-passkey-328019`.`dbt_vbruninhu`.`stg_production_productcategory`\n    ),\n\n    prod_productsubcategory as (\n        select *\n        from`woven-passkey-328019`.`dbt_vbruninhu`.`stg_production_productsubcategory`\n    ),\n\n    merged as (\n        select \n            row_number() over (order by prod.productid) as production_sk -- auto-incremental surrogate key\n            , prod.productid\n            , prod.name as product_name\n            , prod.makeflag\n            , prod.finishedgoodsflag\n            , prod.safetystocklevel\n            , prod.reorderpoint\n            , prod.standardcost\n            , prod.listprice\n            , prod.daystomanufacture\n            , prod.productline\n            , prod.class\n            , prod.productsubcategoryid\n            , prod.productmodelid\n            , prod.sellstartdate\n            , prod.sellenddate\n            , prod.discontinueddate\n            , prod_sub_cat.productcategoryid\n            , prod_sub_cat.name as product_subcategory_name\n            , prod_cat.name as product_category_name\n\n        from prod_product prod\n        left join prod_productsubcategory prod_sub_cat on prod.productsubcategoryid = prod_sub_cat.productsubcategoryid\n        left join prod_productcategory prod_cat on prod_sub_cat.productcategoryid = prod_cat.productcategoryid\n    )\n\nselect * from merged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`dim_production`"}, "model.adventureworks_dw.dim_customer": {"raw_sql": "{{ config(materialized='table') }}\r\n\r\nwith\r\n    pers_person as (\r\n        select *\r\n        from{{ref('stg_person_person')}}\r\n    ),\r\n\r\n    sales_customer as (\r\n        select *\r\n        from{{ref('stg_sales_customer')}}\r\n    ),\r\n\r\n    sales_store as (\r\n        select *\r\n        from{{ref('stg_sales_store')}}\r\n    ),\r\n\r\n    merged as (\r\n        select \r\n            row_number() over (order by customer.customerid) as customer_sk -- auto-incremental surrogate key\r\n            , store.businessentityid\r\n            , store.name as store_name\r\n            , store.salespersonid\r\n            , customer.customerid\r\n            , customer.personid\r\n            , customer.territoryid\r\n            , person.firstname\r\n            , person.lastname\r\n\r\n        from sales_customer customer\r\n        left join pers_person person on customer.personid = person.businessentityid\r\n        left join sales_store store on store.businessentityid = customer.storeid\r\n    )\r\n\r\nselect * from merged", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["model.adventureworks_dw.stg_person_person", "model.adventureworks_dw.stg_sales_customer", "model.adventureworks_dw.stg_sales_store"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "mart", "dim_customer"], "unique_id": "model.adventureworks_dw.dim_customer", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/mart/dim_customer.sql", "original_file_path": "models/adventureworks/mart/dim_customer.sql", "name": "dim_customer", "alias": "dim_customer", "checksum": {"name": "sha256", "checksum": "8f7795d1ecf4a90073bdd9f04fde261f0cde5d3a9432384d28f9cea2d830e0b3"}, "tags": [], "refs": [["stg_person_person"], ["stg_sales_customer"], ["stg_sales_store"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/mart/dim_customer.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/mart/dim_customer.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1636770072, "compiled_sql": "\n\nwith\n    pers_person as (\n        select *\n        from`woven-passkey-328019`.`dbt_vbruninhu`.`stg_person_person`\n    ),\n\n    sales_customer as (\n        select *\n        from`woven-passkey-328019`.`dbt_vbruninhu`.`stg_sales_customer`\n    ),\n\n    sales_store as (\n        select *\n        from`woven-passkey-328019`.`dbt_vbruninhu`.`stg_sales_store`\n    ),\n\n    merged as (\n        select \n            row_number() over (order by customer.customerid) as customer_sk -- auto-incremental surrogate key\n            , store.businessentityid\n            , store.name as store_name\n            , store.salespersonid\n            , customer.customerid\n            , customer.personid\n            , customer.territoryid\n            , person.firstname\n            , person.lastname\n\n        from sales_customer customer\n        left join pers_person person on customer.personid = person.businessentityid\n        left join sales_store store on store.businessentityid = customer.storeid\n    )\n\nselect * from merged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`dim_customer`"}, "model.adventureworks_dw.fact_sales": {"raw_sql": "{{ config(materialized='table') }}\r\n\r\nwith\r\n    sales_creditcard as (\r\n        select *\r\n        from {{ref('stg_sales_creditcard')}}\r\n    ), \r\n\r\n    sales_salesorderdetail as (\r\n        select *\r\n        from{{ref('stg_sales_salesorderdetail')}}\r\n    ),\r\n\r\n    sales_salesorderheader as (\r\n        select *\r\n        from{{ref('stg_sales_salesorderheader')}}\r\n    ),\r\n\r\n    sales_salesorderheadersalesreason as (\r\n        select *\r\n        from{{ref('stg_sales_salesorderheadersalesreason')}}\r\n    ),\r\n\r\n    sales_salesreason as (\r\n        select *\r\n        from{{ref('stg_sales_salesreason')}}\r\n    ),\r\n\r\n    person_address as (\r\n        select *\r\n        from{{ref('stg_person_address')}}\r\n    ),\r\n\r\n    person_stateprovince as (\r\n        select *\r\n        from{{ref('stg_person_stateprovince')}}\r\n    ),\r\n\r\n    person_countryregion as (\r\n        select *\r\n        from{{ref('stg_person_countryregion')}}\r\n    ),\r\n\r\n    purchasing_shipmethod as (\r\n        select *\r\n        from{{ref('stg_purchasing_shipmethod')}}\r\n    ),\r\n\r\n    dim_employee as (\r\n        select \r\n            employee_sk\r\n            , businessentityid\r\n        from{{ref('dim_employee')}}\r\n    ),\r\n\r\n    dim_customer as (\r\n        select\r\n            customer_sk\r\n            , customerid\r\n        from{{ref('dim_customer')}}\r\n    ),\r\n\r\n    dim_production as (\r\n        select\r\n            production_sk\r\n            , productid\r\n        from{{ref('dim_production')}}\r\n    ),\r\n\r\n    dim_purchasing as (\r\n        select\r\n            purchasing_sk\r\n            , productid\r\n        from{{ref('dim_purchasing')}}\r\n    ),\r\n\r\n    merged as (\r\n        select\r\n            sales_ord_head.salesorderid\r\n            , sales_ord_head.revisionnumber\r\n            , sales_ord_head.orderdate\r\n            , sales_ord_head.status\r\n            , sales_ord_head.purchaseordernumber\r\n            , sales_ord_head.customerid\r\n            , sales_ord_head.salespersonid\r\n            , sales_ord_head.territoryid\r\n            , sales_ord_head.taxamt\r\n            , sales_ord_head.freight\r\n            , credit_card.cardtype\r\n            , sales_reas.salesreasonid\r\n            , sales_reas.name as sales_reason_name\r\n            , sales_reas.reasontype\r\n            , sales_ord_det.salesorderdetailid\r\n            , sales_ord_det.orderqty\r\n            , sales_ord_det.productid\r\n            , sales_ord_det.specialofferid\r\n            , sales_ord_det.unitprice\r\n            , sales_ord_det.unitpricediscount\r\n            , per_address.city\r\n            , state_prov.name as state_province_name\r\n            , country_reag.name as country_region_name\r\n            , ship_method.name as ship_method_name\r\n            , dim_employee.employee_sk\r\n            , dim_customer.customer_sk\r\n            , dim_production.production_sk\r\n            , dim_purchasing.purchasing_sk\r\n\r\n        from sales_salesorderheader sales_ord_head\r\n        left join sales_creditcard credit_card on sales_ord_head.creditcardid = credit_card.creditcardid\r\n        left join sales_salesorderheadersalesreason sales_ord_head_sales_reas on sales_ord_head.salesorderid = sales_ord_head_sales_reas.salesorderid\r\n        left join sales_salesreason sales_reas on sales_ord_head_sales_reas.salesreasonid = sales_reas.salesreasonid\r\n        left join sales_salesorderdetail sales_ord_det on sales_ord_head.salesorderid = sales_ord_det.salesorderid\r\n        left join person_address per_address on sales_ord_head.shiptoaddressid = per_address.addressid\r\n        left join person_stateprovince state_prov on per_address.stateprovinceid = state_prov.stateprovinceid\r\n        left join person_countryregion country_reag on state_prov.countryregioncode = country_reag.countryregioncode\r\n        left join purchasing_shipmethod ship_method on sales_ord_head.shipmethodid = ship_method.shipmethodid\r\n        left join dim_employee dim_employee on sales_ord_head.salespersonid = dim_employee.businessentityid\r\n        left join dim_customer dim_customer on sales_ord_head.customerid = dim_customer.customerid\r\n        left join dim_production dim_production on sales_ord_det.productid = dim_production.productid\r\n        left join dim_purchasing dim_purchasing on sales_ord_det.productid = dim_purchasing.productid\r\n    )\r\n\r\nselect * from merged", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["model.adventureworks_dw.stg_sales_creditcard", "model.adventureworks_dw.stg_sales_salesorderdetail", "model.adventureworks_dw.stg_sales_salesorderheader", "model.adventureworks_dw.stg_sales_salesorderheadersalesreason", "model.adventureworks_dw.stg_sales_salesreason", "model.adventureworks_dw.stg_person_address", "model.adventureworks_dw.stg_person_stateprovince", "model.adventureworks_dw.stg_person_countryregion", "model.adventureworks_dw.stg_purchasing_shipmethod", "model.adventureworks_dw.dim_employee", "model.adventureworks_dw.dim_customer", "model.adventureworks_dw.dim_production", "model.adventureworks_dw.dim_purchasing"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "mart", "fact_sales"], "unique_id": "model.adventureworks_dw.fact_sales", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/mart/fact_sales.sql", "original_file_path": "models/adventureworks/mart/fact_sales.sql", "name": "fact_sales", "alias": "fact_sales", "checksum": {"name": "sha256", "checksum": "541a42b9c00926917535037e57814776b356cc76fc652378f6bc896767f43b10"}, "tags": [], "refs": [["stg_sales_creditcard"], ["stg_sales_salesorderdetail"], ["stg_sales_salesorderheader"], ["stg_sales_salesorderheadersalesreason"], ["stg_sales_salesreason"], ["stg_person_address"], ["stg_person_stateprovince"], ["stg_person_countryregion"], ["stg_purchasing_shipmethod"], ["dim_employee"], ["dim_customer"], ["dim_production"], ["dim_purchasing"]], "sources": [], "description": "Nossa tabela de fatos", "columns": {"salesorderid": {"name": "salesorderid", "description": "A cahve prim\u00e1ria original da tabela", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salesreasonid": {"name": "salesreasonid", "description": "A cahve prim\u00e1ria original da tabela", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "adventureworks_dw://models/adventureworks/mart/schemas.yml", "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/mart/fact_sales.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/mart/fact_sales.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1636770073, "compiled_sql": "\n\nwith\n    sales_creditcard as (\n        select *\n        from `woven-passkey-328019`.`dbt_vbruninhu`.`stg_sales_creditcard`\n    ), \n\n    sales_salesorderdetail as (\n        select *\n        from`woven-passkey-328019`.`dbt_vbruninhu`.`stg_sales_salesorderdetail`\n    ),\n\n    sales_salesorderheader as (\n        select *\n        from`woven-passkey-328019`.`dbt_vbruninhu`.`stg_sales_salesorderheader`\n    ),\n\n    sales_salesorderheadersalesreason as (\n        select *\n        from`woven-passkey-328019`.`dbt_vbruninhu`.`stg_sales_salesorderheadersalesreason`\n    ),\n\n    sales_salesreason as (\n        select *\n        from`woven-passkey-328019`.`dbt_vbruninhu`.`stg_sales_salesreason`\n    ),\n\n    person_address as (\n        select *\n        from`woven-passkey-328019`.`dbt_vbruninhu`.`stg_person_address`\n    ),\n\n    person_stateprovince as (\n        select *\n        from`woven-passkey-328019`.`dbt_vbruninhu`.`stg_person_stateprovince`\n    ),\n\n    person_countryregion as (\n        select *\n        from`woven-passkey-328019`.`dbt_vbruninhu`.`stg_person_countryregion`\n    ),\n\n    purchasing_shipmethod as (\n        select *\n        from`woven-passkey-328019`.`dbt_vbruninhu`.`stg_purchasing_shipmethod`\n    ),\n\n    dim_employee as (\n        select \n            employee_sk\n            , businessentityid\n        from`woven-passkey-328019`.`dbt_vbruninhu`.`dim_employee`\n    ),\n\n    dim_customer as (\n        select\n            customer_sk\n            , customerid\n        from`woven-passkey-328019`.`dbt_vbruninhu`.`dim_customer`\n    ),\n\n    dim_production as (\n        select\n            production_sk\n            , productid\n        from`woven-passkey-328019`.`dbt_vbruninhu`.`dim_production`\n    ),\n\n    dim_purchasing as (\n        select\n            purchasing_sk\n            , productid\n        from`woven-passkey-328019`.`dbt_vbruninhu`.`dim_purchasing`\n    ),\n\n    merged as (\n        select\n            sales_ord_head.salesorderid\n            , sales_ord_head.revisionnumber\n            , sales_ord_head.orderdate\n            , sales_ord_head.status\n            , sales_ord_head.purchaseordernumber\n            , sales_ord_head.customerid\n            , sales_ord_head.salespersonid\n            , sales_ord_head.territoryid\n            , sales_ord_head.taxamt\n            , sales_ord_head.freight\n            , credit_card.cardtype\n            , sales_reas.salesreasonid\n            , sales_reas.name as sales_reason_name\n            , sales_reas.reasontype\n            , sales_ord_det.salesorderdetailid\n            , sales_ord_det.orderqty\n            , sales_ord_det.productid\n            , sales_ord_det.specialofferid\n            , sales_ord_det.unitprice\n            , sales_ord_det.unitpricediscount\n            , per_address.city\n            , state_prov.name as state_province_name\n            , country_reag.name as country_region_name\n            , ship_method.name as ship_method_name\n            , dim_employee.employee_sk\n            , dim_customer.customer_sk\n            , dim_production.production_sk\n            , dim_purchasing.purchasing_sk\n\n        from sales_salesorderheader sales_ord_head\n        left join sales_creditcard credit_card on sales_ord_head.creditcardid = credit_card.creditcardid\n        left join sales_salesorderheadersalesreason sales_ord_head_sales_reas on sales_ord_head.salesorderid = sales_ord_head_sales_reas.salesorderid\n        left join sales_salesreason sales_reas on sales_ord_head_sales_reas.salesreasonid = sales_reas.salesreasonid\n        left join sales_salesorderdetail sales_ord_det on sales_ord_head.salesorderid = sales_ord_det.salesorderid\n        left join person_address per_address on sales_ord_head.shiptoaddressid = per_address.addressid\n        left join person_stateprovince state_prov on per_address.stateprovinceid = state_prov.stateprovinceid\n        left join person_countryregion country_reag on state_prov.countryregioncode = country_reag.countryregioncode\n        left join purchasing_shipmethod ship_method on sales_ord_head.shipmethodid = ship_method.shipmethodid\n        left join dim_employee dim_employee on sales_ord_head.salespersonid = dim_employee.businessentityid\n        left join dim_customer dim_customer on sales_ord_head.customerid = dim_customer.customerid\n        left join dim_production dim_production on sales_ord_det.productid = dim_production.productid\n        left join dim_purchasing dim_purchasing on sales_ord_det.productid = dim_purchasing.productid\n    )\n\nselect * from merged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`fact_sales`"}, "model.adventureworks_dw.dim_purchasing": {"raw_sql": "{{ config(materialized='table') }}\r\n\r\nwith\r\n    pur_productvendor as (\r\n        select *\r\n        from {{ref('stg_purchasing_productvendor')}}\r\n    ), \r\n\r\n    pur_vendor as (\r\n        select *\r\n        from{{ref('stg_purchasing_vendor')}}\r\n    ),\r\n\r\n    prod_product as (\r\n        select *\r\n        from {{ref('stg_production_product')}}\r\n    ),\r\n\r\n    merged as (\r\n        select \r\n            row_number() over (order by vendor.businessentityid) as purchasing_sk -- auto-incremental surrogate key\r\n            , vendor.businessentityid\r\n            , vendor.accountnumber\r\n            , vendor.name as vendor_name\r\n            , vendor.creditrating\r\n            , vendor.preferredvendorstatus\r\n            , vendor.activeflag\r\n            , prod_vendor.productid\r\n            , prod_vendor.averageleadtime\r\n            , prod_vendor.standardprice\r\n            , prod_vendor.minorderqty\r\n            , prod_vendor.maxorderqty\r\n            , prod_vendor.onorderqty\r\n            , prod_vendor.unitmeasurecode\r\n            , product.name as product_name\r\n\r\n        from pur_vendor vendor\r\n        left join pur_productvendor prod_vendor on prod_vendor.businessentityid = vendor.businessentityid\r\n        left join prod_product product on product.productid = prod_vendor.productid\r\n    )\r\n\r\nselect * from merged", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["model.adventureworks_dw.stg_purchasing_productvendor", "model.adventureworks_dw.stg_purchasing_vendor", "model.adventureworks_dw.stg_production_product"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "mart", "dim_purchasing"], "unique_id": "model.adventureworks_dw.dim_purchasing", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/mart/dim_purchasing.sql", "original_file_path": "models/adventureworks/mart/dim_purchasing.sql", "name": "dim_purchasing", "alias": "dim_purchasing", "checksum": {"name": "sha256", "checksum": "ae0c6915fabd4a4bb8ec51e6014d503be72ec2c017dd8206e100d0c51165be65"}, "tags": [], "refs": [["stg_purchasing_productvendor"], ["stg_purchasing_vendor"], ["stg_production_product"]], "sources": [], "description": "A tabela de dim_purchasing", "columns": {"purchaseorderid": {"name": "purchaseorderid", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "adventureworks_dw://models/adventureworks/mart/schemas.yml", "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/mart/dim_purchasing.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/mart/dim_purchasing.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1636770073, "compiled_sql": "\n\nwith\n    pur_productvendor as (\n        select *\n        from `woven-passkey-328019`.`dbt_vbruninhu`.`stg_purchasing_productvendor`\n    ), \n\n    pur_vendor as (\n        select *\n        from`woven-passkey-328019`.`dbt_vbruninhu`.`stg_purchasing_vendor`\n    ),\n\n    prod_product as (\n        select *\n        from `woven-passkey-328019`.`dbt_vbruninhu`.`stg_production_product`\n    ),\n\n    merged as (\n        select \n            row_number() over (order by vendor.businessentityid) as purchasing_sk -- auto-incremental surrogate key\n            , vendor.businessentityid\n            , vendor.accountnumber\n            , vendor.name as vendor_name\n            , vendor.creditrating\n            , vendor.preferredvendorstatus\n            , vendor.activeflag\n            , prod_vendor.productid\n            , prod_vendor.averageleadtime\n            , prod_vendor.standardprice\n            , prod_vendor.minorderqty\n            , prod_vendor.maxorderqty\n            , prod_vendor.onorderqty\n            , prod_vendor.unitmeasurecode\n            , product.name as product_name\n\n        from pur_vendor vendor\n        left join pur_productvendor prod_vendor on prod_vendor.businessentityid = vendor.businessentityid\n        left join prod_product product on product.productid = prod_vendor.productid\n    )\n\nselect * from merged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`dim_purchasing`"}, "model.adventureworks_dw.dim_employee": {"raw_sql": "{{ config(materialized='table') }}\r\n\r\nwith\r\n    hr_department as (\r\n        select *\r\n        from {{ref('stg_humanresources_department')}}\r\n    ), \r\n\r\n    hr_employee as (\r\n        select *\r\n        from{{ref('stg_humanresources_employee')}}\r\n    ),\r\n\r\n    hr_employeedepartmenthistory as (\r\n        select *\r\n        from{{ref('stg_humanresources_employeedepartmenthistory')}}\r\n    ),\r\n\r\n    hr_employeepayhistory as (\r\n        select *\r\n        from{{ref('stg_humanresources_employeepayhistory')}}\r\n    ),\r\n\r\n    hr_shift as (\r\n        select *\r\n        from{{ref('stg_humanresources_shift')}}\r\n    ),\r\n\r\n    pers_person as (\r\n        select *\r\n        from{{ref('stg_person_person')}}\r\n    ),\r\n\r\n    merged as (\r\n        select \r\n            row_number() over (order by empl.businessentityid) as employee_sk -- auto-incremental surrogate key\r\n            , empl.businessentityid\r\n            , empl.nationalidnumber\r\n            , empl.loginid\r\n            , empl.jobtitle\r\n            , empl.hiredate\r\n            , empl.salariedflag\r\n            , empl.vacationhours\r\n            , empl.sickleavehours\r\n            , empl.currentflag\r\n            , empl_pay_hist.ratechangedate\r\n            , empl_pay_hist.rate\r\n            , empl_pay_hist.payfrequency\r\n            , empl_dep_hist.departmentid\r\n            , empl_dep_hist.shiftid\r\n            , empl_dep_hist.startdate\r\n            , empl_dep_hist.enddate\r\n            , shift.name as shift_name\r\n            , shift.starttime\r\n            , shift.endtime\r\n            , dep.name as department_name\r\n            , dep.groupname\r\n            , person.firstname\r\n            , person.lastname\r\n\r\n        from hr_employee empl\r\n        left join hr_employeepayhistory empl_pay_hist on empl.businessentityid = empl_pay_hist.businessentityid\r\n        left join hr_employeedepartmenthistory empl_dep_hist on empl.businessentityid = empl_dep_hist.businessentityid\r\n        left join hr_shift shift on empl_dep_hist.shiftid = shift.shiftid\r\n        left join hr_department dep on empl_dep_hist.departmentid = dep.departmentid\r\n        left join pers_person person on empl.businessentityid = person.businessentityid\r\n    )\r\n\r\nselect * from merged", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["model.adventureworks_dw.stg_humanresources_department", "model.adventureworks_dw.stg_humanresources_employee", "model.adventureworks_dw.stg_humanresources_employeedepartmenthistory", "model.adventureworks_dw.stg_humanresources_employeepayhistory", "model.adventureworks_dw.stg_humanresources_shift", "model.adventureworks_dw.stg_person_person"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "mart", "dim_employee"], "unique_id": "model.adventureworks_dw.dim_employee", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/mart/dim_employee.sql", "original_file_path": "models/adventureworks/mart/dim_employee.sql", "name": "dim_employee", "alias": "dim_employee", "checksum": {"name": "sha256", "checksum": "12c877a046c30fc6fdf5bb36862b436dd2cf51c099fbfd30ecd29140e6c59059"}, "tags": [], "refs": [["stg_humanresources_department"], ["stg_humanresources_employee"], ["stg_humanresources_employeedepartmenthistory"], ["stg_humanresources_employeepayhistory"], ["stg_humanresources_shift"], ["stg_person_person"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/mart/dim_employee.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/mart/dim_employee.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1636770073, "compiled_sql": "\n\nwith\n    hr_department as (\n        select *\n        from `woven-passkey-328019`.`dbt_vbruninhu`.`stg_humanresources_department`\n    ), \n\n    hr_employee as (\n        select *\n        from`woven-passkey-328019`.`dbt_vbruninhu`.`stg_humanresources_employee`\n    ),\n\n    hr_employeedepartmenthistory as (\n        select *\n        from`woven-passkey-328019`.`dbt_vbruninhu`.`stg_humanresources_employeedepartmenthistory`\n    ),\n\n    hr_employeepayhistory as (\n        select *\n        from`woven-passkey-328019`.`dbt_vbruninhu`.`stg_humanresources_employeepayhistory`\n    ),\n\n    hr_shift as (\n        select *\n        from`woven-passkey-328019`.`dbt_vbruninhu`.`stg_humanresources_shift`\n    ),\n\n    pers_person as (\n        select *\n        from`woven-passkey-328019`.`dbt_vbruninhu`.`stg_person_person`\n    ),\n\n    merged as (\n        select \n            row_number() over (order by empl.businessentityid) as employee_sk -- auto-incremental surrogate key\n            , empl.businessentityid\n            , empl.nationalidnumber\n            , empl.loginid\n            , empl.jobtitle\n            , empl.hiredate\n            , empl.salariedflag\n            , empl.vacationhours\n            , empl.sickleavehours\n            , empl.currentflag\n            , empl_pay_hist.ratechangedate\n            , empl_pay_hist.rate\n            , empl_pay_hist.payfrequency\n            , empl_dep_hist.departmentid\n            , empl_dep_hist.shiftid\n            , empl_dep_hist.startdate\n            , empl_dep_hist.enddate\n            , shift.name as shift_name\n            , shift.starttime\n            , shift.endtime\n            , dep.name as department_name\n            , dep.groupname\n            , person.firstname\n            , person.lastname\n\n        from hr_employee empl\n        left join hr_employeepayhistory empl_pay_hist on empl.businessentityid = empl_pay_hist.businessentityid\n        left join hr_employeedepartmenthistory empl_dep_hist on empl.businessentityid = empl_dep_hist.businessentityid\n        left join hr_shift shift on empl_dep_hist.shiftid = shift.shiftid\n        left join hr_department dep on empl_dep_hist.departmentid = dep.departmentid\n        left join pers_person person on empl.businessentityid = person.businessentityid\n    )\n\nselect * from merged", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`dim_employee`"}, "model.adventureworks_dw.stg_production_productcategory": {"raw_sql": "with\r\n    source_data as (\r\n        select\r\n            productcategoryid\r\n            , name\r\n            -- , rowguid\r\n            -- , modifieddate\r\n        from {{source('querry_adventureworks20211025', 'production_productcategory')}}\r\n    )\r\n\r\nselect * from source_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.production_productcategory"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "staging", "stg_production_productcategory"], "unique_id": "model.adventureworks_dw.stg_production_productcategory", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/staging/stg_production_productcategory.sql", "original_file_path": "models/adventureworks/staging/stg_production_productcategory.sql", "name": "stg_production_productcategory", "alias": "stg_production_productcategory", "checksum": {"name": "sha256", "checksum": "a0391ee4dead3bebe1cccb13eedb8a78e7289663dad7e9e42a70d3fe9c07555a"}, "tags": [], "refs": [], "sources": [["querry_adventureworks20211025", "production_productcategory"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/staging/stg_production_productcategory.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/staging/stg_production_productcategory.sql", "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "compiled_sql": "with\n    source_data as (\n        select\n            productcategoryid\n            , name\n            -- , rowguid\n            -- , modifieddate\n        from `woven-passkey-328019`.`querry_adventureworks20211025`.`production_productcategory`\n    )\n\nselect * from source_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`stg_production_productcategory`"}, "model.adventureworks_dw.stg_person_stateprovince": {"raw_sql": "with\r\n    source_data as (\r\n        select\r\n            stateprovinceid\r\n            , stateprovincecode\r\n            , countryregioncode\r\n            , isonlystateprovinceflag\r\n            , name\r\n            , territoryid\r\n            -- , rowguid\r\n            -- , modifieddate\r\n        from {{source('querry_adventureworks20211025', 'person_stateprovince')}}\r\n    )\r\n\r\nselect * from source_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.person_stateprovince"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "staging", "stg_person_stateprovince"], "unique_id": "model.adventureworks_dw.stg_person_stateprovince", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/staging/stg_person_stateprovince.sql", "original_file_path": "models/adventureworks/staging/stg_person_stateprovince.sql", "name": "stg_person_stateprovince", "alias": "stg_person_stateprovince", "checksum": {"name": "sha256", "checksum": "b68ef749643c529639e91ae5ec6f85bd94d49404110764e463d35b269c307876"}, "tags": [], "refs": [], "sources": [["querry_adventureworks20211025", "person_stateprovince"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/staging/stg_person_stateprovince.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/staging/stg_person_stateprovince.sql", "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "compiled_sql": "with\n    source_data as (\n        select\n            stateprovinceid\n            , stateprovincecode\n            , countryregioncode\n            , isonlystateprovinceflag\n            , name\n            , territoryid\n            -- , rowguid\n            -- , modifieddate\n        from `woven-passkey-328019`.`querry_adventureworks20211025`.`person_stateprovince`\n    )\n\nselect * from source_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`stg_person_stateprovince`"}, "model.adventureworks_dw.stg_person_person": {"raw_sql": "with\r\n    source_data as (\r\n        select\r\n            businessentityid\r\n            , persontype\r\n            , namestyle\r\n            , title\r\n            , firstname\r\n            -- , middlename\r\n            , lastname\r\n            -- , suffix\r\n            , emailpromotion\r\n            -- , additionalcontactinfo\r\n            -- , demographics\r\n            -- , rowguid\r\n            -- , modifieddate\r\n        from {{source('querry_adventureworks20211025', 'person_person')}}\r\n    )\r\n\r\nselect * from source_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.person_person"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "staging", "stg_person_person"], "unique_id": "model.adventureworks_dw.stg_person_person", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/staging/stg_person_person.sql", "original_file_path": "models/adventureworks/staging/stg_person_person.sql", "name": "stg_person_person", "alias": "stg_person_person", "checksum": {"name": "sha256", "checksum": "98c2fa9200b48155e4b684218b07b743c454c0e8e6156237ab03b096c37500e4"}, "tags": [], "refs": [], "sources": [["querry_adventureworks20211025", "person_person"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/staging/stg_person_person.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/staging/stg_person_person.sql", "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "compiled_sql": "with\n    source_data as (\n        select\n            businessentityid\n            , persontype\n            , namestyle\n            , title\n            , firstname\n            -- , middlename\n            , lastname\n            -- , suffix\n            , emailpromotion\n            -- , additionalcontactinfo\n            -- , demographics\n            -- , rowguid\n            -- , modifieddate\n        from `woven-passkey-328019`.`querry_adventureworks20211025`.`person_person`\n    )\n\nselect * from source_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`stg_person_person`"}, "model.adventureworks_dw.stg_sales_customer": {"raw_sql": "with\r\n    source_data as (\r\n        select\r\n            customerid\r\n            , personid\r\n            , storeid\r\n            , territoryid\r\n            -- , rowguid\r\n            -- , modifieddate\r\n        from {{source('querry_adventureworks20211025', 'sales_customer')}}\r\n    )\r\n\r\nselect * from source_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.sales_customer"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "staging", "stg_sales_customer"], "unique_id": "model.adventureworks_dw.stg_sales_customer", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/staging/stg_sales_customer.sql", "original_file_path": "models/adventureworks/staging/stg_sales_customer.sql", "name": "stg_sales_customer", "alias": "stg_sales_customer", "checksum": {"name": "sha256", "checksum": "033327f7b3139625f95f80f2b663f0d544f94448f50c087142e0acd24796df9b"}, "tags": [], "refs": [], "sources": [["querry_adventureworks20211025", "sales_customer"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/staging/stg_sales_customer.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/staging/stg_sales_customer.sql", "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "compiled_sql": "with\n    source_data as (\n        select\n            customerid\n            , personid\n            , storeid\n            , territoryid\n            -- , rowguid\n            -- , modifieddate\n        from `woven-passkey-328019`.`querry_adventureworks20211025`.`sales_customer`\n    )\n\nselect * from source_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`stg_sales_customer`"}, "model.adventureworks_dw.stg_humanresources_employeedepartmenthistory": {"raw_sql": "with\r\n    source_data as (\r\n        select\r\n            businessentityid\r\n            , departmentid\r\n            , shiftid\r\n            , startdate\r\n            , enddate\r\n            -- , modifieddate\r\n        from {{source('querry_adventureworks20211025', 'humanresources_employeedepartmenthistory')}}\r\n    )\r\n\r\nselect * from source_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_employeedepartmenthistory"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "staging", "stg_humanresources_employeedepartmenthistory"], "unique_id": "model.adventureworks_dw.stg_humanresources_employeedepartmenthistory", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/staging/stg_humanresources_employeedepartmenthistory.sql", "original_file_path": "models/adventureworks/staging/stg_humanresources_employeedepartmenthistory.sql", "name": "stg_humanresources_employeedepartmenthistory", "alias": "stg_humanresources_employeedepartmenthistory", "checksum": {"name": "sha256", "checksum": "b7e4b483bce37ac10b538bfcae61183eae88c8b2df891f7b05617faf93e73e03"}, "tags": [], "refs": [], "sources": [["querry_adventureworks20211025", "humanresources_employeedepartmenthistory"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/staging/stg_humanresources_employeedepartmenthistory.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/staging/stg_humanresources_employeedepartmenthistory.sql", "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "compiled_sql": "with\n    source_data as (\n        select\n            businessentityid\n            , departmentid\n            , shiftid\n            , startdate\n            , enddate\n            -- , modifieddate\n        from `woven-passkey-328019`.`querry_adventureworks20211025`.`humanresources_employeedepartmenthistory`\n    )\n\nselect * from source_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`stg_humanresources_employeedepartmenthistory`"}, "model.adventureworks_dw.stg_purchasing_vendor": {"raw_sql": "with\r\n    source_data as (\r\n        select\r\n            businessentityid\r\n            , accountnumber\r\n            , name\r\n            , creditrating\r\n            , preferredvendorstatus\r\n            , activeflag\r\n            -- , purchasingwebserviceurl\r\n            -- , modifieddate\r\n        from {{source('querry_adventureworks20211025', 'purchasing_vendor')}}\r\n    )\r\n\r\nselect * from source_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.purchasing_vendor"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "staging", "stg_purchasing_vendor"], "unique_id": "model.adventureworks_dw.stg_purchasing_vendor", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/staging/stg_purchasing_vendor.sql", "original_file_path": "models/adventureworks/staging/stg_purchasing_vendor.sql", "name": "stg_purchasing_vendor", "alias": "stg_purchasing_vendor", "checksum": {"name": "sha256", "checksum": "c4cd9d8011f48711b3c06cfaf997b431a676c7627a3b0bdb9fa8f83668271ef6"}, "tags": [], "refs": [], "sources": [["querry_adventureworks20211025", "purchasing_vendor"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/staging/stg_purchasing_vendor.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/staging/stg_purchasing_vendor.sql", "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "compiled_sql": "with\n    source_data as (\n        select\n            businessentityid\n            , accountnumber\n            , name\n            , creditrating\n            , preferredvendorstatus\n            , activeflag\n            -- , purchasingwebserviceurl\n            -- , modifieddate\n        from `woven-passkey-328019`.`querry_adventureworks20211025`.`purchasing_vendor`\n    )\n\nselect * from source_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`stg_purchasing_vendor`"}, "model.adventureworks_dw.stg_humanresources_shift": {"raw_sql": "with\r\n    source_data as (\r\n        select\r\n            shiftid\r\n            , name\r\n            , starttime\r\n            , endtime\r\n            -- , modifieddate\r\n        from {{source('querry_adventureworks20211025', 'humanresources_shift')}}\r\n    )\r\n\r\nselect * from source_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_shift"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "staging", "stg_humanresources_shift"], "unique_id": "model.adventureworks_dw.stg_humanresources_shift", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/staging/stg_humanresources_shift.sql", "original_file_path": "models/adventureworks/staging/stg_humanresources_shift.sql", "name": "stg_humanresources_shift", "alias": "stg_humanresources_shift", "checksum": {"name": "sha256", "checksum": "9b54f6483d2f8dc76fe53c70d36dac3e1750c078d33eca0be0a5be9169d6529c"}, "tags": [], "refs": [], "sources": [["querry_adventureworks20211025", "humanresources_shift"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/staging/stg_humanresources_shift.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/staging/stg_humanresources_shift.sql", "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "compiled_sql": "with\n    source_data as (\n        select\n            shiftid\n            , name\n            , starttime\n            , endtime\n            -- , modifieddate\n        from `woven-passkey-328019`.`querry_adventureworks20211025`.`humanresources_shift`\n    )\n\nselect * from source_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`stg_humanresources_shift`"}, "model.adventureworks_dw.stg_humanresources_department": {"raw_sql": "with\r\n    source_data as (\r\n        select\r\n            departmentid\r\n            , name\r\n            , groupname\r\n            -- , modifieddate\r\n        from {{source('querry_adventureworks20211025', 'humanresources_department')}}\r\n    )\r\n\r\nselect * from source_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_department"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "staging", "stg_humanresources_department"], "unique_id": "model.adventureworks_dw.stg_humanresources_department", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/staging/stg_humanresources_department.sql", "original_file_path": "models/adventureworks/staging/stg_humanresources_department.sql", "name": "stg_humanresources_department", "alias": "stg_humanresources_department", "checksum": {"name": "sha256", "checksum": "e100ffa0dcb9c92689ef2edffb471121cbe594ae7ceba01c56def9c10c2cdc8b"}, "tags": [], "refs": [], "sources": [["querry_adventureworks20211025", "humanresources_department"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/staging/stg_humanresources_department.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/staging/stg_humanresources_department.sql", "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "compiled_sql": "with\n    source_data as (\n        select\n            departmentid\n            , name\n            , groupname\n            -- , modifieddate\n        from `woven-passkey-328019`.`querry_adventureworks20211025`.`humanresources_department`\n    )\n\nselect * from source_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`stg_humanresources_department`"}, "model.adventureworks_dw.stg_sales_salesreason": {"raw_sql": "with\r\n    source_data as (\r\n        select\r\n            salesreasonid\r\n            , name\r\n            , reasontype\r\n            -- , modifieddate\r\n        from {{source('querry_adventureworks20211025', 'sales_salesreason')}}\r\n    )\r\n\r\nselect * from source_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesreason"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "staging", "stg_sales_salesreason"], "unique_id": "model.adventureworks_dw.stg_sales_salesreason", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/staging/stg_sales_salesreason.sql", "original_file_path": "models/adventureworks/staging/stg_sales_salesreason.sql", "name": "stg_sales_salesreason", "alias": "stg_sales_salesreason", "checksum": {"name": "sha256", "checksum": "332736e30dbf0186c596e6fb81ed1ad1d351e8ec4f74646520b689a1e29b5e55"}, "tags": [], "refs": [], "sources": [["querry_adventureworks20211025", "sales_salesreason"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/staging/stg_sales_salesreason.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/staging/stg_sales_salesreason.sql", "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "compiled_sql": "with\n    source_data as (\n        select\n            salesreasonid\n            , name\n            , reasontype\n            -- , modifieddate\n        from `woven-passkey-328019`.`querry_adventureworks20211025`.`sales_salesreason`\n    )\n\nselect * from source_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`stg_sales_salesreason`"}, "model.adventureworks_dw.stg_production_product": {"raw_sql": "with\r\n    source_data as (\r\n        select\r\n            productid\r\n            , name\r\n            -- , productnumber\r\n            , makeflag\r\n            , finishedgoodsflag\r\n            -- , color\r\n            , safetystocklevel\r\n            , reorderpoint\r\n            , standardcost\r\n            , listprice\r\n            -- , size\r\n            -- , sizeunitmeasurecode\r\n            -- , weightunitmeasurecode\r\n            -- , weight\r\n            , daystomanufacture\r\n            , productline\r\n            , class\r\n            -- , style\r\n            , productsubcategoryid\r\n            , productmodelid\r\n            , sellstartdate\r\n            , sellenddate\r\n            , discontinueddate\r\n            -- , rowguid\r\n            -- , modifieddate\r\n        from {{source('querry_adventureworks20211025', 'production_product')}}\r\n    )\r\n\r\nselect * from source_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.production_product"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "staging", "stg_production_product"], "unique_id": "model.adventureworks_dw.stg_production_product", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/staging/stg_production_product.sql", "original_file_path": "models/adventureworks/staging/stg_production_product.sql", "name": "stg_production_product", "alias": "stg_production_product", "checksum": {"name": "sha256", "checksum": "d779db6a9a1defae79472a40436d174dc3ff2e13aa34052c0e9c1ef14d00cd1d"}, "tags": [], "refs": [], "sources": [["querry_adventureworks20211025", "production_product"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/staging/stg_production_product.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/staging/stg_production_product.sql", "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "compiled_sql": "with\n    source_data as (\n        select\n            productid\n            , name\n            -- , productnumber\n            , makeflag\n            , finishedgoodsflag\n            -- , color\n            , safetystocklevel\n            , reorderpoint\n            , standardcost\n            , listprice\n            -- , size\n            -- , sizeunitmeasurecode\n            -- , weightunitmeasurecode\n            -- , weight\n            , daystomanufacture\n            , productline\n            , class\n            -- , style\n            , productsubcategoryid\n            , productmodelid\n            , sellstartdate\n            , sellenddate\n            , discontinueddate\n            -- , rowguid\n            -- , modifieddate\n        from `woven-passkey-328019`.`querry_adventureworks20211025`.`production_product`\n    )\n\nselect * from source_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`stg_production_product`"}, "model.adventureworks_dw.stg_humanresources_employeepayhistory": {"raw_sql": "with\r\n    source_data as (\r\n        select\r\n            businessentityid\r\n            , ratechangedate\r\n            , rate\r\n            , payfrequency\r\n            -- , modifieddate\r\n        from {{source('querry_adventureworks20211025', 'humanresources_employeepayhistory')}}\r\n    )\r\n\r\nselect * from source_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_employeepayhistory"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "staging", "stg_humanresources_employeepayhistory"], "unique_id": "model.adventureworks_dw.stg_humanresources_employeepayhistory", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/staging/stg_humanresources_employeepayhistory.sql", "original_file_path": "models/adventureworks/staging/stg_humanresources_employeepayhistory.sql", "name": "stg_humanresources_employeepayhistory", "alias": "stg_humanresources_employeepayhistory", "checksum": {"name": "sha256", "checksum": "bce9b9d4d954ad922718fcda9e49fc531b984d4c571f8bffec44b0da29a93dcb"}, "tags": [], "refs": [], "sources": [["querry_adventureworks20211025", "humanresources_employeepayhistory"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/staging/stg_humanresources_employeepayhistory.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/staging/stg_humanresources_employeepayhistory.sql", "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "compiled_sql": "with\n    source_data as (\n        select\n            businessentityid\n            , ratechangedate\n            , rate\n            , payfrequency\n            -- , modifieddate\n        from `woven-passkey-328019`.`querry_adventureworks20211025`.`humanresources_employeepayhistory`\n    )\n\nselect * from source_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`stg_humanresources_employeepayhistory`"}, "model.adventureworks_dw.stg_production_productsubcategory": {"raw_sql": "with\r\n    source_data as (\r\n        select\r\n            productsubcategoryid\r\n            , productcategoryid\r\n            , name\r\n            -- , rowguid\r\n            -- , modifieddate\r\n        from {{source('querry_adventureworks20211025', 'production_productsubcategory')}}\r\n    )\r\n\r\nselect * from source_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.production_productsubcategory"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "staging", "stg_production_productsubcategory"], "unique_id": "model.adventureworks_dw.stg_production_productsubcategory", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/staging/stg_production_productsubcategory.sql", "original_file_path": "models/adventureworks/staging/stg_production_productsubcategory.sql", "name": "stg_production_productsubcategory", "alias": "stg_production_productsubcategory", "checksum": {"name": "sha256", "checksum": "eb81bf5cb83cf244f2b051d167d23c9478382588ada713c88eca80bd0cc0a8b1"}, "tags": [], "refs": [], "sources": [["querry_adventureworks20211025", "production_productsubcategory"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/staging/stg_production_productsubcategory.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/staging/stg_production_productsubcategory.sql", "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "compiled_sql": "with\n    source_data as (\n        select\n            productsubcategoryid\n            , productcategoryid\n            , name\n            -- , rowguid\n            -- , modifieddate\n        from `woven-passkey-328019`.`querry_adventureworks20211025`.`production_productsubcategory`\n    )\n\nselect * from source_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`stg_production_productsubcategory`"}, "model.adventureworks_dw.stg_humanresources_employee": {"raw_sql": "with\r\n    source_data as (\r\n        select\r\n            businessentityid\r\n            , nationalidnumber\r\n            , loginid\r\n            , jobtitle\r\n            -- , birthdate\r\n            -- , maritalstatus\r\n            -- , gender\r\n            , hiredate\r\n            , salariedflag\r\n            , vacationhours\r\n            , sickleavehours\r\n            , currentflag\r\n            -- , rowguid\r\n            -- , modifieddate\r\n            -- , organizationnode\r\n        from {{source('querry_adventureworks20211025', 'humanresources_employee')}}\r\n    )\r\n\r\nselect * from source_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_employee"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "staging", "stg_humanresources_employee"], "unique_id": "model.adventureworks_dw.stg_humanresources_employee", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/staging/stg_humanresources_employee.sql", "original_file_path": "models/adventureworks/staging/stg_humanresources_employee.sql", "name": "stg_humanresources_employee", "alias": "stg_humanresources_employee", "checksum": {"name": "sha256", "checksum": "8eb46e903af5cdc68499d2762c0b8821dd657f5d2d56e230b70b762f6e900d74"}, "tags": [], "refs": [], "sources": [["querry_adventureworks20211025", "humanresources_employee"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/staging/stg_humanresources_employee.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/staging/stg_humanresources_employee.sql", "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "compiled_sql": "with\n    source_data as (\n        select\n            businessentityid\n            , nationalidnumber\n            , loginid\n            , jobtitle\n            -- , birthdate\n            -- , maritalstatus\n            -- , gender\n            , hiredate\n            , salariedflag\n            , vacationhours\n            , sickleavehours\n            , currentflag\n            -- , rowguid\n            -- , modifieddate\n            -- , organizationnode\n        from `woven-passkey-328019`.`querry_adventureworks20211025`.`humanresources_employee`\n    )\n\nselect * from source_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`stg_humanresources_employee`"}, "model.adventureworks_dw.stg_person_countryregion": {"raw_sql": "with\r\n    source_data as (\r\n        select\r\n            countryregioncode\r\n            , name\r\n            -- , modifieddate\r\n        from {{source('querry_adventureworks20211025', 'person_countryregion')}}\r\n    )\r\n\r\nselect * from source_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.person_countryregion"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "staging", "stg_person_countryregion"], "unique_id": "model.adventureworks_dw.stg_person_countryregion", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/staging/stg_person_countryregion.sql", "original_file_path": "models/adventureworks/staging/stg_person_countryregion.sql", "name": "stg_person_countryregion", "alias": "stg_person_countryregion", "checksum": {"name": "sha256", "checksum": "9db09442bb0ee0245d81566c9c8c396de7060618ed6350785afab7b9492194f3"}, "tags": [], "refs": [], "sources": [["querry_adventureworks20211025", "person_countryregion"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/staging/stg_person_countryregion.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/staging/stg_person_countryregion.sql", "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "compiled_sql": "with\n    source_data as (\n        select\n            countryregioncode\n            , name\n            -- , modifieddate\n        from `woven-passkey-328019`.`querry_adventureworks20211025`.`person_countryregion`\n    )\n\nselect * from source_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`stg_person_countryregion`"}, "model.adventureworks_dw.stg_sales_salesorderdetail": {"raw_sql": "with\r\n    source_data as (\r\n        select\r\n            salesorderid\r\n            , salesorderdetailid\r\n            -- , carriertrackingnumber\r\n            , orderqty\r\n            , productid\r\n            , specialofferid\r\n            , unitprice\r\n            , unitpricediscount\r\n            -- , rowguid\r\n            -- , modifieddate\r\n        from {{source('querry_adventureworks20211025', 'sales_salesorderdetail')}}\r\n    )\r\n\r\nselect * from source_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderdetail"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "staging", "stg_sales_salesorderdetail"], "unique_id": "model.adventureworks_dw.stg_sales_salesorderdetail", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/staging/stg_sales_salesorderdetail.sql", "original_file_path": "models/adventureworks/staging/stg_sales_salesorderdetail.sql", "name": "stg_sales_salesorderdetail", "alias": "stg_sales_salesorderdetail", "checksum": {"name": "sha256", "checksum": "aa756a17680d8d617d67fe575d68b3601ba6d96340c27406ac2ccc50ac5c2b8a"}, "tags": [], "refs": [], "sources": [["querry_adventureworks20211025", "sales_salesorderdetail"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/staging/stg_sales_salesorderdetail.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/staging/stg_sales_salesorderdetail.sql", "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "compiled_sql": "with\n    source_data as (\n        select\n            salesorderid\n            , salesorderdetailid\n            -- , carriertrackingnumber\n            , orderqty\n            , productid\n            , specialofferid\n            , unitprice\n            , unitpricediscount\n            -- , rowguid\n            -- , modifieddate\n        from `woven-passkey-328019`.`querry_adventureworks20211025`.`sales_salesorderdetail`\n    )\n\nselect * from source_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`stg_sales_salesorderdetail`"}, "model.adventureworks_dw.stg_purchasing_productvendor": {"raw_sql": "with\r\n    source_data as (\r\n        select\r\n            productid\r\n            , businessentityid\r\n            , averageleadtime\r\n            , standardprice\r\n            , lastreceiptcost\r\n            , lastreceiptdate\r\n            , minorderqty\r\n            , maxorderqty\r\n            , onorderqty\r\n            , unitmeasurecode\r\n            -- , modifieddate\r\n        from {{source('querry_adventureworks20211025', 'purchasing_productvendor')}}\r\n    )\r\n\r\nselect * from source_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.purchasing_productvendor"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "staging", "stg_purchasing_productvendor"], "unique_id": "model.adventureworks_dw.stg_purchasing_productvendor", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/staging/stg_purchasing_productvendor.sql", "original_file_path": "models/adventureworks/staging/stg_purchasing_productvendor.sql", "name": "stg_purchasing_productvendor", "alias": "stg_purchasing_productvendor", "checksum": {"name": "sha256", "checksum": "49d0e191f2261f65bf3766fe67896fecaebc9c69a95a38a58c8031993be58c44"}, "tags": [], "refs": [], "sources": [["querry_adventureworks20211025", "purchasing_productvendor"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/staging/stg_purchasing_productvendor.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/staging/stg_purchasing_productvendor.sql", "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "compiled_sql": "with\n    source_data as (\n        select\n            productid\n            , businessentityid\n            , averageleadtime\n            , standardprice\n            , lastreceiptcost\n            , lastreceiptdate\n            , minorderqty\n            , maxorderqty\n            , onorderqty\n            , unitmeasurecode\n            -- , modifieddate\n        from `woven-passkey-328019`.`querry_adventureworks20211025`.`purchasing_productvendor`\n    )\n\nselect * from source_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`stg_purchasing_productvendor`"}, "model.adventureworks_dw.stg_purchasing_shipmethod": {"raw_sql": "with\r\n    source_data as (\r\n        select\r\n            shipmethodid\r\n            , name\r\n            , shipbase\r\n            , shiprate\r\n            -- , rowguid\r\n            -- , modifieddate\r\n        from {{source('querry_adventureworks20211025', 'purchasing_shipmethod')}}\r\n    )\r\n\r\nselect * from source_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.purchasing_shipmethod"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "staging", "stg_purchasing_shipmethod"], "unique_id": "model.adventureworks_dw.stg_purchasing_shipmethod", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/staging/stg_purchasing_shipmethod.sql", "original_file_path": "models/adventureworks/staging/stg_purchasing_shipmethod.sql", "name": "stg_purchasing_shipmethod", "alias": "stg_purchasing_shipmethod", "checksum": {"name": "sha256", "checksum": "8a80284be7a6915946801e262d7e4742a714246c9dd1609aa7107c92c9879144"}, "tags": [], "refs": [], "sources": [["querry_adventureworks20211025", "purchasing_shipmethod"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/staging/stg_purchasing_shipmethod.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/staging/stg_purchasing_shipmethod.sql", "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "compiled_sql": "with\n    source_data as (\n        select\n            shipmethodid\n            , name\n            , shipbase\n            , shiprate\n            -- , rowguid\n            -- , modifieddate\n        from `woven-passkey-328019`.`querry_adventureworks20211025`.`purchasing_shipmethod`\n    )\n\nselect * from source_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`stg_purchasing_shipmethod`"}, "model.adventureworks_dw.stg_person_address": {"raw_sql": "with\r\n    source_data as (\r\n        select\r\n            addressid\r\n            -- , addressline1\r\n            -- , addressline2\r\n            , city\r\n            , stateprovinceid\r\n            -- , postalcode\r\n            -- , spatiallocation\r\n            -- , rowguid\r\n            -- , modifieddate\r\n        from {{source('querry_adventureworks20211025', 'person_address')}}\r\n    )\r\n\r\nselect * from source_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.person_address"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "staging", "stg_person_address"], "unique_id": "model.adventureworks_dw.stg_person_address", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/staging/stg_person_address.sql", "original_file_path": "models/adventureworks/staging/stg_person_address.sql", "name": "stg_person_address", "alias": "stg_person_address", "checksum": {"name": "sha256", "checksum": "c612a3dece4a2662905b11b8667ccf8467bc8abd657929e08f255690a11f2916"}, "tags": [], "refs": [], "sources": [["querry_adventureworks20211025", "person_address"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/staging/stg_person_address.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/staging/stg_person_address.sql", "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "compiled_sql": "with\n    source_data as (\n        select\n            addressid\n            -- , addressline1\n            -- , addressline2\n            , city\n            , stateprovinceid\n            -- , postalcode\n            -- , spatiallocation\n            -- , rowguid\n            -- , modifieddate\n        from `woven-passkey-328019`.`querry_adventureworks20211025`.`person_address`\n    )\n\nselect * from source_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`stg_person_address`"}, "model.adventureworks_dw.stg_sales_creditcard": {"raw_sql": "with\r\n    source_data as (\r\n        select\r\n            creditcardid\r\n            , cardtype\r\n            -- , cardnumber\r\n            -- , expmonth\r\n            -- , expyear\r\n            -- , modifieddate\r\n        from {{source('querry_adventureworks20211025', 'sales_creditcard')}}\r\n    )\r\n\r\nselect * from source_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.sales_creditcard"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "staging", "stg_sales_creditcard"], "unique_id": "model.adventureworks_dw.stg_sales_creditcard", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/staging/stg_sales_creditcard.sql", "original_file_path": "models/adventureworks/staging/stg_sales_creditcard.sql", "name": "stg_sales_creditcard", "alias": "stg_sales_creditcard", "checksum": {"name": "sha256", "checksum": "32ffcc59e1fa183668f42a722f7dfd6d46bf4ec420dd6d74208a24f273bf7010"}, "tags": [], "refs": [], "sources": [["querry_adventureworks20211025", "sales_creditcard"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/staging/stg_sales_creditcard.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/staging/stg_sales_creditcard.sql", "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "compiled_sql": "with\n    source_data as (\n        select\n            creditcardid\n            , cardtype\n            -- , cardnumber\n            -- , expmonth\n            -- , expyear\n            -- , modifieddate\n        from `woven-passkey-328019`.`querry_adventureworks20211025`.`sales_creditcard`\n    )\n\nselect * from source_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`stg_sales_creditcard`"}, "model.adventureworks_dw.stg_sales_salesorderheadersalesreason": {"raw_sql": "with\r\n    source_data as (\r\n        select\r\n            salesorderid\r\n            , salesreasonid\r\n            -- , modifieddate\r\n        from {{source('querry_adventureworks20211025', 'sales_salesorderheadersalesreason')}}\r\n    )\r\n\r\nselect * from source_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderheadersalesreason"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "staging", "stg_sales_salesorderheadersalesreason"], "unique_id": "model.adventureworks_dw.stg_sales_salesorderheadersalesreason", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/staging/stg_sales_salesorderheadersalesreason.sql", "original_file_path": "models/adventureworks/staging/stg_sales_salesorderheadersalesreason.sql", "name": "stg_sales_salesorderheadersalesreason", "alias": "stg_sales_salesorderheadersalesreason", "checksum": {"name": "sha256", "checksum": "96956830de86720518db0de5934e4a62ee27fa1ee8304ea63c5448c15a6db7c8"}, "tags": [], "refs": [], "sources": [["querry_adventureworks20211025", "sales_salesorderheadersalesreason"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/staging/stg_sales_salesorderheadersalesreason.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/staging/stg_sales_salesorderheadersalesreason.sql", "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "compiled_sql": "with\n    source_data as (\n        select\n            salesorderid\n            , salesreasonid\n            -- , modifieddate\n        from `woven-passkey-328019`.`querry_adventureworks20211025`.`sales_salesorderheadersalesreason`\n    )\n\nselect * from source_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`stg_sales_salesorderheadersalesreason`"}, "model.adventureworks_dw.stg_sales_salesorderheader": {"raw_sql": "with\r\n    source_data as (\r\n        select\r\n            salesorderid\r\n            , revisionnumber\r\n            , orderdate\r\n            -- , duedate\r\n            -- , shipdate\r\n            , status\r\n            -- , onlineorderflag\r\n            , purchaseordernumber\r\n            -- , accountnumber\r\n            , customerid\r\n            , salespersonid\r\n            , territoryid\r\n            -- , billtoaddressid\r\n            , shiptoaddressid\r\n            , shipmethodid\r\n            , creditcardid\r\n            -- , creditcardapprovalcode\r\n            -- , currencyrateid\r\n            , subtotal\r\n            , taxamt\r\n            , freight\r\n            , totaldue\r\n            -- , comment\r\n            -- , rowguid\r\n            -- , modifieddate\r\n        from {{source('querry_adventureworks20211025', 'sales_salesorderheader')}}\r\n    )\r\n\r\nselect * from source_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderheader"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "staging", "stg_sales_salesorderheader"], "unique_id": "model.adventureworks_dw.stg_sales_salesorderheader", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/staging/stg_sales_salesorderheader.sql", "original_file_path": "models/adventureworks/staging/stg_sales_salesorderheader.sql", "name": "stg_sales_salesorderheader", "alias": "stg_sales_salesorderheader", "checksum": {"name": "sha256", "checksum": "1a52d202351e43bcc9798fa238a9fdf35036ca7f03ab52b3a407f1bb0416d2b5"}, "tags": [], "refs": [], "sources": [["querry_adventureworks20211025", "sales_salesorderheader"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/staging/stg_sales_salesorderheader.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/staging/stg_sales_salesorderheader.sql", "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "compiled_sql": "with\n    source_data as (\n        select\n            salesorderid\n            , revisionnumber\n            , orderdate\n            -- , duedate\n            -- , shipdate\n            , status\n            -- , onlineorderflag\n            , purchaseordernumber\n            -- , accountnumber\n            , customerid\n            , salespersonid\n            , territoryid\n            -- , billtoaddressid\n            , shiptoaddressid\n            , shipmethodid\n            , creditcardid\n            -- , creditcardapprovalcode\n            -- , currencyrateid\n            , subtotal\n            , taxamt\n            , freight\n            , totaldue\n            -- , comment\n            -- , rowguid\n            -- , modifieddate\n        from `woven-passkey-328019`.`querry_adventureworks20211025`.`sales_salesorderheader`\n    )\n\nselect * from source_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`stg_sales_salesorderheader`"}, "model.adventureworks_dw.stg_sales_store": {"raw_sql": "with\r\n    source_data as (\r\n        select\r\n            businessentityid\r\n            , name\r\n            , salespersonid\r\n            -- , demographics\r\n            -- , rowguid\r\n            -- , modifieddate\r\n        from {{source('querry_adventureworks20211025', 'sales_store')}}\r\n    )\r\n\r\nselect * from source_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.sales_store"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu", "fqn": ["adventureworks_dw", "adventureworks", "staging", "stg_sales_store"], "unique_id": "model.adventureworks_dw.stg_sales_store", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "adventureworks/staging/stg_sales_store.sql", "original_file_path": "models/adventureworks/staging/stg_sales_store.sql", "name": "stg_sales_store", "alias": "stg_sales_store", "checksum": {"name": "sha256", "checksum": "5e8708d547256a3324c9b5ae098e2f1d6417cfb111d057db160dc74477e5c86d"}, "tags": [], "refs": [], "sources": [["querry_adventureworks20211025", "sales_store"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/adventureworks_dw/models/adventureworks/staging/stg_sales_store.sql", "build_path": "target/run/adventureworks_dw/models/adventureworks/staging/stg_sales_store.sql", "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "compiled_sql": "with\n    source_data as (\n        select\n            businessentityid\n            , name\n            , salespersonid\n            -- , demographics\n            -- , rowguid\n            -- , modifieddate\n        from `woven-passkey-328019`.`querry_adventureworks20211025`.`sales_store`\n    )\n\nselect * from source_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`woven-passkey-328019`.`dbt_vbruninhu`.`stg_sales_store`"}, "test.adventureworks_dw.not_null_fact_sales_salesorderid.1242b7f3e1": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesorderid", "model": "{{ get_where_subquery(ref('fact_sales')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.adventureworks_dw.fact_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "not_null_fact_sales_salesorderid"], "unique_id": "test.adventureworks_dw.not_null_fact_sales_salesorderid.1242b7f3e1", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/not_null_fact_sales_salesorderid.sql", "original_file_path": "models/adventureworks/mart/schemas.yml", "name": "not_null_fact_sales_salesorderid", "alias": "not_null_fact_sales_salesorderid", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fact_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "column_name": "salesorderid"}, "test.adventureworks_dw.unique_dim_humanresources_businessentityid.07ec6a1de8": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(ref('dim_humanresources')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "unique_dim_humanresources_businessentityid"], "unique_id": "test.adventureworks_dw.unique_dim_humanresources_businessentityid.07ec6a1de8", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/unique_dim_humanresources_businessentityid.sql", "original_file_path": "models/adventureworks/mart/schemas.yml", "name": "unique_dim_humanresources_businessentityid", "alias": "unique_dim_humanresources_businessentityid", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_humanresources"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "column_name": "businessentityid"}, "test.adventureworks_dw.not_null_dim_humanresources_businessentityid.10997c1897": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(ref('dim_humanresources')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "not_null_dim_humanresources_businessentityid"], "unique_id": "test.adventureworks_dw.not_null_dim_humanresources_businessentityid.10997c1897", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/not_null_dim_humanresources_businessentityid.sql", "original_file_path": "models/adventureworks/mart/schemas.yml", "name": "not_null_dim_humanresources_businessentityid", "alias": "not_null_dim_humanresources_businessentityid", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_humanresources"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "column_name": "businessentityid"}, "test.adventureworks_dw.unique_dim_person_businessentityid.79bf997e4d": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(ref('dim_person')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "unique_dim_person_businessentityid"], "unique_id": "test.adventureworks_dw.unique_dim_person_businessentityid.79bf997e4d", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/unique_dim_person_businessentityid.sql", "original_file_path": "models/adventureworks/mart/schemas.yml", "name": "unique_dim_person_businessentityid", "alias": "unique_dim_person_businessentityid", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_person"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "column_name": "businessentityid"}, "test.adventureworks_dw.not_null_dim_person_businessentityid.cc1735a726": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(ref('dim_person')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "not_null_dim_person_businessentityid"], "unique_id": "test.adventureworks_dw.not_null_dim_person_businessentityid.cc1735a726", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/not_null_dim_person_businessentityid.sql", "original_file_path": "models/adventureworks/mart/schemas.yml", "name": "not_null_dim_person_businessentityid", "alias": "not_null_dim_person_businessentityid", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_person"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1636770073, "column_name": "businessentityid"}, "test.adventureworks_dw.source_unique_querry_adventureworks20211025_humanresources_department_departmentid.a1f16fdcae": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_unique_querry_adventure_d17d4c27510a7ff38390e0cc14dea4c2\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "departmentid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'humanresources_department')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_department"]}, "config": {"enabled": true, "alias": "source_unique_querry_adventure_d17d4c27510a7ff38390e0cc14dea4c2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_unique_querry_adventureworks20211025_humanresources_department_departmentid"], "unique_id": "test.adventureworks_dw.source_unique_querry_adventureworks20211025_humanresources_department_departmentid.a1f16fdcae", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_unique_querry_adventure_d17d4c27510a7ff38390e0cc14dea4c2.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_unique_querry_adventureworks20211025_humanresources_department_departmentid", "alias": "source_unique_querry_adventure_d17d4c27510a7ff38390e0cc14dea4c2", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "humanresources_department"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_querry_adventure_d17d4c27510a7ff38390e0cc14dea4c2"}, "created_at": 1636770073, "column_name": "departmentid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_department_departmentid.95a6eef876": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_0df18d537203cd1de172444e6874d53d\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "departmentid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'humanresources_department')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_department"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_0df18d537203cd1de172444e6874d53d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_humanresources_department_departmentid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_department_departmentid.95a6eef876", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_0df18d537203cd1de172444e6874d53d.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_humanresources_department_departmentid", "alias": "source_not_null_querry_adventu_0df18d537203cd1de172444e6874d53d", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "humanresources_department"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_0df18d537203cd1de172444e6874d53d"}, "created_at": 1636770073, "column_name": "departmentid"}, "test.adventureworks_dw.source_unique_querry_adventureworks20211025_humanresources_employee_businessentityid.a74e7a281b": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_unique_querry_adventure_a5963776ffc2c2cd261acac990ef6e4c\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'humanresources_employee')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_employee"]}, "config": {"enabled": true, "alias": "source_unique_querry_adventure_a5963776ffc2c2cd261acac990ef6e4c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_unique_querry_adventureworks20211025_humanresources_employee_businessentityid"], "unique_id": "test.adventureworks_dw.source_unique_querry_adventureworks20211025_humanresources_employee_businessentityid.a74e7a281b", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_unique_querry_adventure_a5963776ffc2c2cd261acac990ef6e4c.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_unique_querry_adventureworks20211025_humanresources_employee_businessentityid", "alias": "source_unique_querry_adventure_a5963776ffc2c2cd261acac990ef6e4c", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "humanresources_employee"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_querry_adventure_a5963776ffc2c2cd261acac990ef6e4c"}, "created_at": 1636770073, "column_name": "businessentityid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_employee_businessentityid.f1991ce9f9": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_9b896e18f1ae8703635818458cf286d8\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'humanresources_employee')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_employee"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_9b896e18f1ae8703635818458cf286d8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_humanresources_employee_businessentityid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_employee_businessentityid.f1991ce9f9", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_9b896e18f1ae8703635818458cf286d8.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_humanresources_employee_businessentityid", "alias": "source_not_null_querry_adventu_9b896e18f1ae8703635818458cf286d8", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "humanresources_employee"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_9b896e18f1ae8703635818458cf286d8"}, "created_at": 1636770073, "column_name": "businessentityid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_employeedepartmenthistory_businessentityid.02fe5feba7": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_46b2b11ffd47768631b18500af7d0803\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'humanresources_employeedepartmenthistory')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_employeedepartmenthistory"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_46b2b11ffd47768631b18500af7d0803", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_humanresources_employeedepartmenthistory_businessentityid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_employeedepartmenthistory_businessentityid.02fe5feba7", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_46b2b11ffd47768631b18500af7d0803.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_humanresources_employeedepartmenthistory_businessentityid", "alias": "source_not_null_querry_adventu_46b2b11ffd47768631b18500af7d0803", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "humanresources_employeedepartmenthistory"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_46b2b11ffd47768631b18500af7d0803"}, "created_at": 1636770073, "column_name": "businessentityid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_employeedepartmenthistory_departmentid.832d9302ca": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_e72e0d1287aea75dadc624d61f8964f6\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "departmentid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'humanresources_employeedepartmenthistory')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_employeedepartmenthistory"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_e72e0d1287aea75dadc624d61f8964f6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_humanresources_employeedepartmenthistory_departmentid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_employeedepartmenthistory_departmentid.832d9302ca", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_e72e0d1287aea75dadc624d61f8964f6.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_humanresources_employeedepartmenthistory_departmentid", "alias": "source_not_null_querry_adventu_e72e0d1287aea75dadc624d61f8964f6", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "humanresources_employeedepartmenthistory"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_e72e0d1287aea75dadc624d61f8964f6"}, "created_at": 1636770073, "column_name": "departmentid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_employeedepartmenthistory_shiftid.2b567eca07": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_372796c0d1446a5e9bcd128dcd41192c\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "shiftid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'humanresources_employeedepartmenthistory')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_employeedepartmenthistory"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_372796c0d1446a5e9bcd128dcd41192c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_humanresources_employeedepartmenthistory_shiftid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_employeedepartmenthistory_shiftid.2b567eca07", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_372796c0d1446a5e9bcd128dcd41192c.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_humanresources_employeedepartmenthistory_shiftid", "alias": "source_not_null_querry_adventu_372796c0d1446a5e9bcd128dcd41192c", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "humanresources_employeedepartmenthistory"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_372796c0d1446a5e9bcd128dcd41192c"}, "created_at": 1636770073, "column_name": "shiftid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_employeepayhistory_businessentityid.17454d2444": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_41a8ececea98aa32379d94d71941cf17\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'humanresources_employeepayhistory')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_employeepayhistory"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_41a8ececea98aa32379d94d71941cf17", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_humanresources_employeepayhistory_businessentityid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_employeepayhistory_businessentityid.17454d2444", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_41a8ececea98aa32379d94d71941cf17.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_humanresources_employeepayhistory_businessentityid", "alias": "source_not_null_querry_adventu_41a8ececea98aa32379d94d71941cf17", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "humanresources_employeepayhistory"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_41a8ececea98aa32379d94d71941cf17"}, "created_at": 1636770073, "column_name": "businessentityid"}, "test.adventureworks_dw.source_unique_querry_adventureworks20211025_humanresources_shift_shiftid.4c9547903a": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_unique_querry_adventure_1a648248b30aaef26dd608ec14f068ac\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "shiftid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'humanresources_shift')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_shift"]}, "config": {"enabled": true, "alias": "source_unique_querry_adventure_1a648248b30aaef26dd608ec14f068ac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_unique_querry_adventureworks20211025_humanresources_shift_shiftid"], "unique_id": "test.adventureworks_dw.source_unique_querry_adventureworks20211025_humanresources_shift_shiftid.4c9547903a", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_unique_querry_adventure_1a648248b30aaef26dd608ec14f068ac.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_unique_querry_adventureworks20211025_humanresources_shift_shiftid", "alias": "source_unique_querry_adventure_1a648248b30aaef26dd608ec14f068ac", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "humanresources_shift"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_querry_adventure_1a648248b30aaef26dd608ec14f068ac"}, "created_at": 1636770073, "column_name": "shiftid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_shift_shiftid.3a40bc4af5": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_15db150a390a1f8a0258901c268213ca\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "shiftid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'humanresources_shift')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_shift"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_15db150a390a1f8a0258901c268213ca", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_humanresources_shift_shiftid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_shift_shiftid.3a40bc4af5", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_15db150a390a1f8a0258901c268213ca.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_humanresources_shift_shiftid", "alias": "source_not_null_querry_adventu_15db150a390a1f8a0258901c268213ca", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "humanresources_shift"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_15db150a390a1f8a0258901c268213ca"}, "created_at": 1636770073, "column_name": "shiftid"}, "test.adventureworks_dw.source_unique_querry_adventureworks20211025_person_address_addressid.480c98f7e1": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_unique_querry_adventure_06fe08079daebf80f920539d9fce2ce6\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "addressid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'person_address')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.person_address"]}, "config": {"enabled": true, "alias": "source_unique_querry_adventure_06fe08079daebf80f920539d9fce2ce6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_unique_querry_adventureworks20211025_person_address_addressid"], "unique_id": "test.adventureworks_dw.source_unique_querry_adventureworks20211025_person_address_addressid.480c98f7e1", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_unique_querry_adventure_06fe08079daebf80f920539d9fce2ce6.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_unique_querry_adventureworks20211025_person_address_addressid", "alias": "source_unique_querry_adventure_06fe08079daebf80f920539d9fce2ce6", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "person_address"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_querry_adventure_06fe08079daebf80f920539d9fce2ce6"}, "created_at": 1636770073, "column_name": "addressid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_person_address_addressid.c7fa2f0cab": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_1a979816d1ccf901c81cafdb23abcec6\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "addressid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'person_address')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.person_address"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_1a979816d1ccf901c81cafdb23abcec6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_person_address_addressid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_person_address_addressid.c7fa2f0cab", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_1a979816d1ccf901c81cafdb23abcec6.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_person_address_addressid", "alias": "source_not_null_querry_adventu_1a979816d1ccf901c81cafdb23abcec6", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "person_address"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_1a979816d1ccf901c81cafdb23abcec6"}, "created_at": 1636770073, "column_name": "addressid"}, "test.adventureworks_dw.source_unique_querry_adventureworks20211025_person_countryregion_countryregioncode.22bc8d1ff1": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_unique_querry_adventure_4e38c80924009b0287cf8b500039401d\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "countryregioncode", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'person_countryregion')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.person_countryregion"]}, "config": {"enabled": true, "alias": "source_unique_querry_adventure_4e38c80924009b0287cf8b500039401d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_unique_querry_adventureworks20211025_person_countryregion_countryregioncode"], "unique_id": "test.adventureworks_dw.source_unique_querry_adventureworks20211025_person_countryregion_countryregioncode.22bc8d1ff1", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_unique_querry_adventure_4e38c80924009b0287cf8b500039401d.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_unique_querry_adventureworks20211025_person_countryregion_countryregioncode", "alias": "source_unique_querry_adventure_4e38c80924009b0287cf8b500039401d", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "person_countryregion"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_querry_adventure_4e38c80924009b0287cf8b500039401d"}, "created_at": 1636770073, "column_name": "countryregioncode"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_person_countryregion_countryregioncode.338f01e81b": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_e99e006734221a3eec8996e54d6a1a98\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "countryregioncode", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'person_countryregion')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.person_countryregion"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_e99e006734221a3eec8996e54d6a1a98", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_person_countryregion_countryregioncode"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_person_countryregion_countryregioncode.338f01e81b", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_e99e006734221a3eec8996e54d6a1a98.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_person_countryregion_countryregioncode", "alias": "source_not_null_querry_adventu_e99e006734221a3eec8996e54d6a1a98", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "person_countryregion"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_e99e006734221a3eec8996e54d6a1a98"}, "created_at": 1636770073, "column_name": "countryregioncode"}, "test.adventureworks_dw.source_unique_querry_adventureworks20211025_person_person_businessentityid.02058aee10": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_unique_querry_adventure_762e860d77fabd950a0f67b3fbe3af7a\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'person_person')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.person_person"]}, "config": {"enabled": true, "alias": "source_unique_querry_adventure_762e860d77fabd950a0f67b3fbe3af7a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_unique_querry_adventureworks20211025_person_person_businessentityid"], "unique_id": "test.adventureworks_dw.source_unique_querry_adventureworks20211025_person_person_businessentityid.02058aee10", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_unique_querry_adventure_762e860d77fabd950a0f67b3fbe3af7a.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_unique_querry_adventureworks20211025_person_person_businessentityid", "alias": "source_unique_querry_adventure_762e860d77fabd950a0f67b3fbe3af7a", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "person_person"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_querry_adventure_762e860d77fabd950a0f67b3fbe3af7a"}, "created_at": 1636770073, "column_name": "businessentityid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_person_person_businessentityid.38c4f2e820": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_74ecb79451484f972e996f01c3b341a3\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'person_person')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.person_person"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_74ecb79451484f972e996f01c3b341a3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_person_person_businessentityid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_person_person_businessentityid.38c4f2e820", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_74ecb79451484f972e996f01c3b341a3.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_person_person_businessentityid", "alias": "source_not_null_querry_adventu_74ecb79451484f972e996f01c3b341a3", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "person_person"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_74ecb79451484f972e996f01c3b341a3"}, "created_at": 1636770073, "column_name": "businessentityid"}, "test.adventureworks_dw.source_unique_querry_adventureworks20211025_person_stateprovince_stateprovinceid.d11e50af0e": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_unique_querry_adventure_33ac9937c30a688e6f2769fb62381059\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "stateprovinceid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'person_stateprovince')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.person_stateprovince"]}, "config": {"enabled": true, "alias": "source_unique_querry_adventure_33ac9937c30a688e6f2769fb62381059", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_unique_querry_adventureworks20211025_person_stateprovince_stateprovinceid"], "unique_id": "test.adventureworks_dw.source_unique_querry_adventureworks20211025_person_stateprovince_stateprovinceid.d11e50af0e", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_unique_querry_adventure_33ac9937c30a688e6f2769fb62381059.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_unique_querry_adventureworks20211025_person_stateprovince_stateprovinceid", "alias": "source_unique_querry_adventure_33ac9937c30a688e6f2769fb62381059", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "person_stateprovince"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_querry_adventure_33ac9937c30a688e6f2769fb62381059"}, "created_at": 1636770073, "column_name": "stateprovinceid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_person_stateprovince_stateprovinceid.d04019cec1": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_a6097ab27deaf00b46832b67c58caeea\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stateprovinceid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'person_stateprovince')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.person_stateprovince"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_a6097ab27deaf00b46832b67c58caeea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_person_stateprovince_stateprovinceid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_person_stateprovince_stateprovinceid.d04019cec1", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_a6097ab27deaf00b46832b67c58caeea.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_person_stateprovince_stateprovinceid", "alias": "source_not_null_querry_adventu_a6097ab27deaf00b46832b67c58caeea", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "person_stateprovince"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_a6097ab27deaf00b46832b67c58caeea"}, "created_at": 1636770073, "column_name": "stateprovinceid"}, "test.adventureworks_dw.source_unique_querry_adventureworks20211025_production_product_productid.251492adb0": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_unique_querry_adventure_3878251f15a99190022d5a708badbf38\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "productid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'production_product')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.production_product"]}, "config": {"enabled": true, "alias": "source_unique_querry_adventure_3878251f15a99190022d5a708badbf38", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_unique_querry_adventureworks20211025_production_product_productid"], "unique_id": "test.adventureworks_dw.source_unique_querry_adventureworks20211025_production_product_productid.251492adb0", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_unique_querry_adventure_3878251f15a99190022d5a708badbf38.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_unique_querry_adventureworks20211025_production_product_productid", "alias": "source_unique_querry_adventure_3878251f15a99190022d5a708badbf38", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "production_product"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_querry_adventure_3878251f15a99190022d5a708badbf38"}, "created_at": 1636770073, "column_name": "productid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_production_product_productid.80ab87fa65": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_a06adefba43b7bb104d891e6d35296e1\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "productid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'production_product')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.production_product"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_a06adefba43b7bb104d891e6d35296e1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_production_product_productid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_production_product_productid.80ab87fa65", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_a06adefba43b7bb104d891e6d35296e1.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_production_product_productid", "alias": "source_not_null_querry_adventu_a06adefba43b7bb104d891e6d35296e1", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "production_product"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_a06adefba43b7bb104d891e6d35296e1"}, "created_at": 1636770073, "column_name": "productid"}, "test.adventureworks_dw.source_unique_querry_adventureworks20211025_production_productcategory_productcategoryid.4a80454f19": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_unique_querry_adventure_caa37afb2d91ce812607df25fd8bf036\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "productcategoryid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'production_productcategory')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.production_productcategory"]}, "config": {"enabled": true, "alias": "source_unique_querry_adventure_caa37afb2d91ce812607df25fd8bf036", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_unique_querry_adventureworks20211025_production_productcategory_productcategoryid"], "unique_id": "test.adventureworks_dw.source_unique_querry_adventureworks20211025_production_productcategory_productcategoryid.4a80454f19", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_unique_querry_adventure_caa37afb2d91ce812607df25fd8bf036.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_unique_querry_adventureworks20211025_production_productcategory_productcategoryid", "alias": "source_unique_querry_adventure_caa37afb2d91ce812607df25fd8bf036", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "production_productcategory"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_querry_adventure_caa37afb2d91ce812607df25fd8bf036"}, "created_at": 1636770073, "column_name": "productcategoryid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_production_productcategory_productcategoryid.cd5a304bba": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_91a5cad75a0660143d45c2efff7a5436\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "productcategoryid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'production_productcategory')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.production_productcategory"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_91a5cad75a0660143d45c2efff7a5436", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_production_productcategory_productcategoryid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_production_productcategory_productcategoryid.cd5a304bba", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_91a5cad75a0660143d45c2efff7a5436.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_production_productcategory_productcategoryid", "alias": "source_not_null_querry_adventu_91a5cad75a0660143d45c2efff7a5436", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "production_productcategory"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_91a5cad75a0660143d45c2efff7a5436"}, "created_at": 1636770073, "column_name": "productcategoryid"}, "test.adventureworks_dw.source_unique_querry_adventureworks20211025_production_productsubcategory_productsubcategoryid.7d9b2a2a7d": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_unique_querry_adventure_3ce431a15efc48477e40e242c32a4da1\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "productsubcategoryid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'production_productsubcategory')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.production_productsubcategory"]}, "config": {"enabled": true, "alias": "source_unique_querry_adventure_3ce431a15efc48477e40e242c32a4da1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_unique_querry_adventureworks20211025_production_productsubcategory_productsubcategoryid"], "unique_id": "test.adventureworks_dw.source_unique_querry_adventureworks20211025_production_productsubcategory_productsubcategoryid.7d9b2a2a7d", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_unique_querry_adventure_3ce431a15efc48477e40e242c32a4da1.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_unique_querry_adventureworks20211025_production_productsubcategory_productsubcategoryid", "alias": "source_unique_querry_adventure_3ce431a15efc48477e40e242c32a4da1", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "production_productsubcategory"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_querry_adventure_3ce431a15efc48477e40e242c32a4da1"}, "created_at": 1636770073, "column_name": "productsubcategoryid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_production_productsubcategory_productsubcategoryid.7baf65ee4c": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_868bdec3ca5e298b0dc70b452c2f984d\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "productsubcategoryid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'production_productsubcategory')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.production_productsubcategory"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_868bdec3ca5e298b0dc70b452c2f984d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_production_productsubcategory_productsubcategoryid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_production_productsubcategory_productsubcategoryid.7baf65ee4c", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_868bdec3ca5e298b0dc70b452c2f984d.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_production_productsubcategory_productsubcategoryid", "alias": "source_not_null_querry_adventu_868bdec3ca5e298b0dc70b452c2f984d", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "production_productsubcategory"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_868bdec3ca5e298b0dc70b452c2f984d"}, "created_at": 1636770073, "column_name": "productsubcategoryid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_purchasing_productvendor_productid.735caf7f41": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_548da35442d64255063c34aad757f36c\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "productid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'purchasing_productvendor')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.purchasing_productvendor"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_548da35442d64255063c34aad757f36c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_purchasing_productvendor_productid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_purchasing_productvendor_productid.735caf7f41", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_548da35442d64255063c34aad757f36c.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_purchasing_productvendor_productid", "alias": "source_not_null_querry_adventu_548da35442d64255063c34aad757f36c", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "purchasing_productvendor"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_548da35442d64255063c34aad757f36c"}, "created_at": 1636770073, "column_name": "productid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_purchasing_productvendor_businessentityid.06980459eb": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_50f43eb612721b7d379b357f9376ad0d\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'purchasing_productvendor')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.purchasing_productvendor"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_50f43eb612721b7d379b357f9376ad0d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_purchasing_productvendor_businessentityid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_purchasing_productvendor_businessentityid.06980459eb", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_50f43eb612721b7d379b357f9376ad0d.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_purchasing_productvendor_businessentityid", "alias": "source_not_null_querry_adventu_50f43eb612721b7d379b357f9376ad0d", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "purchasing_productvendor"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_50f43eb612721b7d379b357f9376ad0d"}, "created_at": 1636770073, "column_name": "businessentityid"}, "test.adventureworks_dw.source_unique_querry_adventureworks20211025_purchasing_shipmethod_shipmethodid.467620674d": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_unique_querry_adventure_c3c3cb5e8706d6ad007566c49a0f998f\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "shipmethodid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'purchasing_shipmethod')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.purchasing_shipmethod"]}, "config": {"enabled": true, "alias": "source_unique_querry_adventure_c3c3cb5e8706d6ad007566c49a0f998f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_unique_querry_adventureworks20211025_purchasing_shipmethod_shipmethodid"], "unique_id": "test.adventureworks_dw.source_unique_querry_adventureworks20211025_purchasing_shipmethod_shipmethodid.467620674d", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_unique_querry_adventure_c3c3cb5e8706d6ad007566c49a0f998f.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_unique_querry_adventureworks20211025_purchasing_shipmethod_shipmethodid", "alias": "source_unique_querry_adventure_c3c3cb5e8706d6ad007566c49a0f998f", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "purchasing_shipmethod"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_querry_adventure_c3c3cb5e8706d6ad007566c49a0f998f"}, "created_at": 1636770073, "column_name": "shipmethodid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_purchasing_shipmethod_shipmethodid.4d844f187b": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_ff5f465d7a69afd8822fe5f33549763c\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "shipmethodid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'purchasing_shipmethod')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.purchasing_shipmethod"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_ff5f465d7a69afd8822fe5f33549763c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_purchasing_shipmethod_shipmethodid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_purchasing_shipmethod_shipmethodid.4d844f187b", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_ff5f465d7a69afd8822fe5f33549763c.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_purchasing_shipmethod_shipmethodid", "alias": "source_not_null_querry_adventu_ff5f465d7a69afd8822fe5f33549763c", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "purchasing_shipmethod"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_ff5f465d7a69afd8822fe5f33549763c"}, "created_at": 1636770073, "column_name": "shipmethodid"}, "test.adventureworks_dw.source_unique_querry_adventureworks20211025_purchasing_vendor_businessentityid.78f110344e": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_unique_querry_adventure_9308b7e38daee3a66f5f1fd68569c06c\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'purchasing_vendor')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.purchasing_vendor"]}, "config": {"enabled": true, "alias": "source_unique_querry_adventure_9308b7e38daee3a66f5f1fd68569c06c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_unique_querry_adventureworks20211025_purchasing_vendor_businessentityid"], "unique_id": "test.adventureworks_dw.source_unique_querry_adventureworks20211025_purchasing_vendor_businessentityid.78f110344e", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_unique_querry_adventure_9308b7e38daee3a66f5f1fd68569c06c.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_unique_querry_adventureworks20211025_purchasing_vendor_businessentityid", "alias": "source_unique_querry_adventure_9308b7e38daee3a66f5f1fd68569c06c", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "purchasing_vendor"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_querry_adventure_9308b7e38daee3a66f5f1fd68569c06c"}, "created_at": 1636770073, "column_name": "businessentityid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_purchasing_vendor_businessentityid.9d748c599e": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_5b4ecd2894e3f6b01f03ff1ca73ea4a7\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'purchasing_vendor')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.purchasing_vendor"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_5b4ecd2894e3f6b01f03ff1ca73ea4a7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_purchasing_vendor_businessentityid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_purchasing_vendor_businessentityid.9d748c599e", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_5b4ecd2894e3f6b01f03ff1ca73ea4a7.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_purchasing_vendor_businessentityid", "alias": "source_not_null_querry_adventu_5b4ecd2894e3f6b01f03ff1ca73ea4a7", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "purchasing_vendor"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_5b4ecd2894e3f6b01f03ff1ca73ea4a7"}, "created_at": 1636770073, "column_name": "businessentityid"}, "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_creditcard_creditcardid.8d9dfd2362": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_unique_querry_adventure_1c00485b8597e61416fe7fc1a3560314\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "creditcardid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'sales_creditcard')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.sales_creditcard"]}, "config": {"enabled": true, "alias": "source_unique_querry_adventure_1c00485b8597e61416fe7fc1a3560314", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_unique_querry_adventureworks20211025_sales_creditcard_creditcardid"], "unique_id": "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_creditcard_creditcardid.8d9dfd2362", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_unique_querry_adventure_1c00485b8597e61416fe7fc1a3560314.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_unique_querry_adventureworks20211025_sales_creditcard_creditcardid", "alias": "source_unique_querry_adventure_1c00485b8597e61416fe7fc1a3560314", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "sales_creditcard"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_querry_adventure_1c00485b8597e61416fe7fc1a3560314"}, "created_at": 1636770073, "column_name": "creditcardid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_creditcard_creditcardid.011d155a1d": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_b46e28760f23c65d84ee92dd8458798b\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "creditcardid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'sales_creditcard')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.sales_creditcard"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_b46e28760f23c65d84ee92dd8458798b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_sales_creditcard_creditcardid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_creditcard_creditcardid.011d155a1d", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_b46e28760f23c65d84ee92dd8458798b.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_sales_creditcard_creditcardid", "alias": "source_not_null_querry_adventu_b46e28760f23c65d84ee92dd8458798b", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "sales_creditcard"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_b46e28760f23c65d84ee92dd8458798b"}, "created_at": 1636770073, "column_name": "creditcardid"}, "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_customer_customerid.3a1a09ef65": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_unique_querry_adventure_38ac9eee9d659d102bfa2aac6f58d68f\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customerid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'sales_customer')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.sales_customer"]}, "config": {"enabled": true, "alias": "source_unique_querry_adventure_38ac9eee9d659d102bfa2aac6f58d68f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_unique_querry_adventureworks20211025_sales_customer_customerid"], "unique_id": "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_customer_customerid.3a1a09ef65", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_unique_querry_adventure_38ac9eee9d659d102bfa2aac6f58d68f.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_unique_querry_adventureworks20211025_sales_customer_customerid", "alias": "source_unique_querry_adventure_38ac9eee9d659d102bfa2aac6f58d68f", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "sales_customer"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_querry_adventure_38ac9eee9d659d102bfa2aac6f58d68f"}, "created_at": 1636770073, "column_name": "customerid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_customer_customerid.f0c22f32f1": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_35f005e7b3eea2048c996434a34f3462\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customerid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'sales_customer')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.sales_customer"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_35f005e7b3eea2048c996434a34f3462", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_sales_customer_customerid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_customer_customerid.f0c22f32f1", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_35f005e7b3eea2048c996434a34f3462.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_sales_customer_customerid", "alias": "source_not_null_querry_adventu_35f005e7b3eea2048c996434a34f3462", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "sales_customer"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_35f005e7b3eea2048c996434a34f3462"}, "created_at": 1636770073, "column_name": "customerid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesorderdetail_salesorderid.0c884d96d1": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_1b34fbc114892732d2499badddc9555b\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesorderid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'sales_salesorderdetail')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderdetail"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_1b34fbc114892732d2499badddc9555b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_sales_salesorderdetail_salesorderid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesorderdetail_salesorderid.0c884d96d1", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_1b34fbc114892732d2499badddc9555b.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_sales_salesorderdetail_salesorderid", "alias": "source_not_null_querry_adventu_1b34fbc114892732d2499badddc9555b", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "sales_salesorderdetail"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_1b34fbc114892732d2499badddc9555b"}, "created_at": 1636770073, "column_name": "salesorderid"}, "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_salesorderdetail_salesorderdetailid.c305a43381": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_unique_querry_adventure_b992432e60d341d1b9fa74bf00f946c1\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "salesorderdetailid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'sales_salesorderdetail')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderdetail"]}, "config": {"enabled": true, "alias": "source_unique_querry_adventure_b992432e60d341d1b9fa74bf00f946c1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_unique_querry_adventureworks20211025_sales_salesorderdetail_salesorderdetailid"], "unique_id": "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_salesorderdetail_salesorderdetailid.c305a43381", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_unique_querry_adventure_b992432e60d341d1b9fa74bf00f946c1.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_unique_querry_adventureworks20211025_sales_salesorderdetail_salesorderdetailid", "alias": "source_unique_querry_adventure_b992432e60d341d1b9fa74bf00f946c1", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "sales_salesorderdetail"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_querry_adventure_b992432e60d341d1b9fa74bf00f946c1"}, "created_at": 1636770073, "column_name": "salesorderdetailid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesorderdetail_salesorderdetailid.a9abfb097c": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_2d25fbdff3fc7131c1e90efb51ac1b41\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesorderdetailid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'sales_salesorderdetail')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderdetail"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_2d25fbdff3fc7131c1e90efb51ac1b41", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_sales_salesorderdetail_salesorderdetailid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesorderdetail_salesorderdetailid.a9abfb097c", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_2d25fbdff3fc7131c1e90efb51ac1b41.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_sales_salesorderdetail_salesorderdetailid", "alias": "source_not_null_querry_adventu_2d25fbdff3fc7131c1e90efb51ac1b41", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "sales_salesorderdetail"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_2d25fbdff3fc7131c1e90efb51ac1b41"}, "created_at": 1636770073, "column_name": "salesorderdetailid"}, "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_salesorderheader_salesorderid.c8d5206ab4": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_unique_querry_adventure_3f5831d1825e0728c2b6d99d6746ea05\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "salesorderid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'sales_salesorderheader')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderheader"]}, "config": {"enabled": true, "alias": "source_unique_querry_adventure_3f5831d1825e0728c2b6d99d6746ea05", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_unique_querry_adventureworks20211025_sales_salesorderheader_salesorderid"], "unique_id": "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_salesorderheader_salesorderid.c8d5206ab4", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_unique_querry_adventure_3f5831d1825e0728c2b6d99d6746ea05.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_unique_querry_adventureworks20211025_sales_salesorderheader_salesorderid", "alias": "source_unique_querry_adventure_3f5831d1825e0728c2b6d99d6746ea05", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "sales_salesorderheader"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_querry_adventure_3f5831d1825e0728c2b6d99d6746ea05"}, "created_at": 1636770073, "column_name": "salesorderid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesorderheader_salesorderid.1a126b8489": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_428f88c91a1d157fd13245c02e41f283\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesorderid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'sales_salesorderheader')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderheader"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_428f88c91a1d157fd13245c02e41f283", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_sales_salesorderheader_salesorderid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesorderheader_salesorderid.1a126b8489", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_428f88c91a1d157fd13245c02e41f283.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_sales_salesorderheader_salesorderid", "alias": "source_not_null_querry_adventu_428f88c91a1d157fd13245c02e41f283", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "sales_salesorderheader"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_428f88c91a1d157fd13245c02e41f283"}, "created_at": 1636770073, "column_name": "salesorderid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesorderheadersalesreason_salesorderid.99ba677e55": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_f05255f91f5b58765e03cb9716ed3c6c\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesorderid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'sales_salesorderheadersalesreason')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderheadersalesreason"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_f05255f91f5b58765e03cb9716ed3c6c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_sales_salesorderheadersalesreason_salesorderid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesorderheadersalesreason_salesorderid.99ba677e55", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_f05255f91f5b58765e03cb9716ed3c6c.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_sales_salesorderheadersalesreason_salesorderid", "alias": "source_not_null_querry_adventu_f05255f91f5b58765e03cb9716ed3c6c", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "sales_salesorderheadersalesreason"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_f05255f91f5b58765e03cb9716ed3c6c"}, "created_at": 1636770073, "column_name": "salesorderid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesorderheadersalesreason_salesreasonid.818995d4d5": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_ce23afdff0f0822821ce74c694f37ab7\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesreasonid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'sales_salesorderheadersalesreason')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderheadersalesreason"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_ce23afdff0f0822821ce74c694f37ab7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_sales_salesorderheadersalesreason_salesreasonid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesorderheadersalesreason_salesreasonid.818995d4d5", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_ce23afdff0f0822821ce74c694f37ab7.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_sales_salesorderheadersalesreason_salesreasonid", "alias": "source_not_null_querry_adventu_ce23afdff0f0822821ce74c694f37ab7", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "sales_salesorderheadersalesreason"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_ce23afdff0f0822821ce74c694f37ab7"}, "created_at": 1636770073, "column_name": "salesreasonid"}, "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_salesreason_salesreasonid.a008252423": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_unique_querry_adventure_c1776944f6bce7e98193482ff6a5fb29\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "salesreasonid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'sales_salesreason')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesreason"]}, "config": {"enabled": true, "alias": "source_unique_querry_adventure_c1776944f6bce7e98193482ff6a5fb29", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_unique_querry_adventureworks20211025_sales_salesreason_salesreasonid"], "unique_id": "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_salesreason_salesreasonid.a008252423", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_unique_querry_adventure_c1776944f6bce7e98193482ff6a5fb29.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_unique_querry_adventureworks20211025_sales_salesreason_salesreasonid", "alias": "source_unique_querry_adventure_c1776944f6bce7e98193482ff6a5fb29", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "sales_salesreason"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_querry_adventure_c1776944f6bce7e98193482ff6a5fb29"}, "created_at": 1636770073, "column_name": "salesreasonid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesreason_salesreasonid.b638e1f245": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_23022ab20a93e64fcf61d36dd815969b\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesreasonid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'sales_salesreason')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesreason"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_23022ab20a93e64fcf61d36dd815969b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_sales_salesreason_salesreasonid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesreason_salesreasonid.b638e1f245", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_23022ab20a93e64fcf61d36dd815969b.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_sales_salesreason_salesreasonid", "alias": "source_not_null_querry_adventu_23022ab20a93e64fcf61d36dd815969b", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "sales_salesreason"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_23022ab20a93e64fcf61d36dd815969b"}, "created_at": 1636770073, "column_name": "salesreasonid"}, "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_store_businessentityid.bf22f4a5d7": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_unique_querry_adventure_11a8dfeaf65dced54027967f53d5205b\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'sales_store')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.sales_store"]}, "config": {"enabled": true, "alias": "source_unique_querry_adventure_11a8dfeaf65dced54027967f53d5205b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_unique_querry_adventureworks20211025_sales_store_businessentityid"], "unique_id": "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_store_businessentityid.bf22f4a5d7", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_unique_querry_adventure_11a8dfeaf65dced54027967f53d5205b.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_unique_querry_adventureworks20211025_sales_store_businessentityid", "alias": "source_unique_querry_adventure_11a8dfeaf65dced54027967f53d5205b", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "sales_store"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_querry_adventure_11a8dfeaf65dced54027967f53d5205b"}, "created_at": 1636770073, "column_name": "businessentityid"}, "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_store_businessentityid.3ca406c0d6": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_not_null_querry_adventu_f801e35d014dad6159121bb6b70edc1d\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(source('querry_adventureworks20211025', 'sales_store')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.adventureworks_dw.querry_adventureworks20211025.sales_store"]}, "config": {"enabled": true, "alias": "source_not_null_querry_adventu_f801e35d014dad6159121bb6b70edc1d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "woven-passkey-328019", "schema": "dbt_vbruninhu_dbt_test__audit", "fqn": ["adventureworks_dw", "schema_test", "source_not_null_querry_adventureworks20211025_sales_store_businessentityid"], "unique_id": "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_store_businessentityid.3ca406c0d6", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "schema_test/source_not_null_querry_adventu_f801e35d014dad6159121bb6b70edc1d.sql", "original_file_path": "models/adventureworks/sources.yml", "name": "source_not_null_querry_adventureworks20211025_sales_store_businessentityid", "alias": "source_not_null_querry_adventu_f801e35d014dad6159121bb6b70edc1d", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["querry_adventureworks20211025", "sales_store"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_querry_adventu_f801e35d014dad6159121bb6b70edc1d"}, "created_at": 1636770073, "column_name": "businessentityid"}}, "sources": {"source.adventureworks_dw.querry_adventureworks20211025.humanresources_department": {"fqn": ["adventureworks_dw", "adventureworks", "querry_adventureworks20211025", "humanresources_department"], "database": "woven-passkey-328019", "schema": "querry_adventureworks20211025", "unique_id": "source.adventureworks_dw.querry_adventureworks20211025.humanresources_department", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "models/adventureworks/sources.yml", "original_file_path": "models/adventureworks/sources.yml", "name": "humanresources_department", "source_name": "querry_adventureworks20211025", "source_description": "", "loader": "", "identifier": "humanresources_department", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Essa \u00e9 a tabela department do humanresources", "columns": {"departmentid": {"name": "departmentid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`woven-passkey-328019`.`querry_adventureworks20211025`.`humanresources_department`", "created_at": 1636770073}, "source.adventureworks_dw.querry_adventureworks20211025.humanresources_employee": {"fqn": ["adventureworks_dw", "adventureworks", "querry_adventureworks20211025", "humanresources_employee"], "database": "woven-passkey-328019", "schema": "querry_adventureworks20211025", "unique_id": "source.adventureworks_dw.querry_adventureworks20211025.humanresources_employee", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "models/adventureworks/sources.yml", "original_file_path": "models/adventureworks/sources.yml", "name": "humanresources_employee", "source_name": "querry_adventureworks20211025", "source_description": "", "loader": "", "identifier": "humanresources_employee", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Essa \u00e9 a tabela employee do humanresources", "columns": {"businessentityid": {"name": "businessentityid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`woven-passkey-328019`.`querry_adventureworks20211025`.`humanresources_employee`", "created_at": 1636770073}, "source.adventureworks_dw.querry_adventureworks20211025.humanresources_employeedepartmenthistory": {"fqn": ["adventureworks_dw", "adventureworks", "querry_adventureworks20211025", "humanresources_employeedepartmenthistory"], "database": "woven-passkey-328019", "schema": "querry_adventureworks20211025", "unique_id": "source.adventureworks_dw.querry_adventureworks20211025.humanresources_employeedepartmenthistory", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "models/adventureworks/sources.yml", "original_file_path": "models/adventureworks/sources.yml", "name": "humanresources_employeedepartmenthistory", "source_name": "querry_adventureworks20211025", "source_description": "", "loader": "", "identifier": "humanresources_employeedepartmenthistory", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Essa \u00e9 a tabela employee_department_history do humanresources", "columns": {"businessentityid": {"name": "businessentityid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "departmentid": {"name": "departmentid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shiftid": {"name": "shiftid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`woven-passkey-328019`.`querry_adventureworks20211025`.`humanresources_employeedepartmenthistory`", "created_at": 1636770073}, "source.adventureworks_dw.querry_adventureworks20211025.humanresources_employeepayhistory": {"fqn": ["adventureworks_dw", "adventureworks", "querry_adventureworks20211025", "humanresources_employeepayhistory"], "database": "woven-passkey-328019", "schema": "querry_adventureworks20211025", "unique_id": "source.adventureworks_dw.querry_adventureworks20211025.humanresources_employeepayhistory", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "models/adventureworks/sources.yml", "original_file_path": "models/adventureworks/sources.yml", "name": "humanresources_employeepayhistory", "source_name": "querry_adventureworks20211025", "source_description": "", "loader": "", "identifier": "humanresources_employeepayhistory", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Essa \u00e9 a tabela employee_history do humanresources", "columns": {"businessentityid": {"name": "businessentityid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`woven-passkey-328019`.`querry_adventureworks20211025`.`humanresources_employeepayhistory`", "created_at": 1636770073}, "source.adventureworks_dw.querry_adventureworks20211025.humanresources_shift": {"fqn": ["adventureworks_dw", "adventureworks", "querry_adventureworks20211025", "humanresources_shift"], "database": "woven-passkey-328019", "schema": "querry_adventureworks20211025", "unique_id": "source.adventureworks_dw.querry_adventureworks20211025.humanresources_shift", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "models/adventureworks/sources.yml", "original_file_path": "models/adventureworks/sources.yml", "name": "humanresources_shift", "source_name": "querry_adventureworks20211025", "source_description": "", "loader": "", "identifier": "humanresources_shift", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Essa \u00e9 a tabela shift do humanresources", "columns": {"shiftid": {"name": "shiftid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`woven-passkey-328019`.`querry_adventureworks20211025`.`humanresources_shift`", "created_at": 1636770073}, "source.adventureworks_dw.querry_adventureworks20211025.person_address": {"fqn": ["adventureworks_dw", "adventureworks", "querry_adventureworks20211025", "person_address"], "database": "woven-passkey-328019", "schema": "querry_adventureworks20211025", "unique_id": "source.adventureworks_dw.querry_adventureworks20211025.person_address", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "models/adventureworks/sources.yml", "original_file_path": "models/adventureworks/sources.yml", "name": "person_address", "source_name": "querry_adventureworks20211025", "source_description": "", "loader": "", "identifier": "person_address", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Essa \u00e9 a tabela address do person", "columns": {"addressid": {"name": "addressid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`woven-passkey-328019`.`querry_adventureworks20211025`.`person_address`", "created_at": 1636770073}, "source.adventureworks_dw.querry_adventureworks20211025.person_countryregion": {"fqn": ["adventureworks_dw", "adventureworks", "querry_adventureworks20211025", "person_countryregion"], "database": "woven-passkey-328019", "schema": "querry_adventureworks20211025", "unique_id": "source.adventureworks_dw.querry_adventureworks20211025.person_countryregion", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "models/adventureworks/sources.yml", "original_file_path": "models/adventureworks/sources.yml", "name": "person_countryregion", "source_name": "querry_adventureworks20211025", "source_description": "", "loader": "", "identifier": "person_countryregion", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Essa \u00e9 a tabela country_region do person", "columns": {"countryregioncode": {"name": "countryregioncode", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`woven-passkey-328019`.`querry_adventureworks20211025`.`person_countryregion`", "created_at": 1636770073}, "source.adventureworks_dw.querry_adventureworks20211025.person_person": {"fqn": ["adventureworks_dw", "adventureworks", "querry_adventureworks20211025", "person_person"], "database": "woven-passkey-328019", "schema": "querry_adventureworks20211025", "unique_id": "source.adventureworks_dw.querry_adventureworks20211025.person_person", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "models/adventureworks/sources.yml", "original_file_path": "models/adventureworks/sources.yml", "name": "person_person", "source_name": "querry_adventureworks20211025", "source_description": "", "loader": "", "identifier": "person_person", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Essa \u00e9 a tabela person do person", "columns": {"businessentityid": {"name": "businessentityid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`woven-passkey-328019`.`querry_adventureworks20211025`.`person_person`", "created_at": 1636770073}, "source.adventureworks_dw.querry_adventureworks20211025.person_stateprovince": {"fqn": ["adventureworks_dw", "adventureworks", "querry_adventureworks20211025", "person_stateprovince"], "database": "woven-passkey-328019", "schema": "querry_adventureworks20211025", "unique_id": "source.adventureworks_dw.querry_adventureworks20211025.person_stateprovince", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "models/adventureworks/sources.yml", "original_file_path": "models/adventureworks/sources.yml", "name": "person_stateprovince", "source_name": "querry_adventureworks20211025", "source_description": "", "loader": "", "identifier": "person_stateprovince", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Essa \u00e9 a tabela state_province do person", "columns": {"stateprovinceid": {"name": "stateprovinceid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`woven-passkey-328019`.`querry_adventureworks20211025`.`person_stateprovince`", "created_at": 1636770073}, "source.adventureworks_dw.querry_adventureworks20211025.production_product": {"fqn": ["adventureworks_dw", "adventureworks", "querry_adventureworks20211025", "production_product"], "database": "woven-passkey-328019", "schema": "querry_adventureworks20211025", "unique_id": "source.adventureworks_dw.querry_adventureworks20211025.production_product", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "models/adventureworks/sources.yml", "original_file_path": "models/adventureworks/sources.yml", "name": "production_product", "source_name": "querry_adventureworks20211025", "source_description": "", "loader": "", "identifier": "production_product", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Essa \u00e9 a tabela product do production", "columns": {"productid": {"name": "productid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`woven-passkey-328019`.`querry_adventureworks20211025`.`production_product`", "created_at": 1636770073}, "source.adventureworks_dw.querry_adventureworks20211025.production_productcategory": {"fqn": ["adventureworks_dw", "adventureworks", "querry_adventureworks20211025", "production_productcategory"], "database": "woven-passkey-328019", "schema": "querry_adventureworks20211025", "unique_id": "source.adventureworks_dw.querry_adventureworks20211025.production_productcategory", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "models/adventureworks/sources.yml", "original_file_path": "models/adventureworks/sources.yml", "name": "production_productcategory", "source_name": "querry_adventureworks20211025", "source_description": "", "loader": "", "identifier": "production_productcategory", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Essa \u00e9 a tabela product_category do production", "columns": {"productcategoryid": {"name": "productcategoryid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`woven-passkey-328019`.`querry_adventureworks20211025`.`production_productcategory`", "created_at": 1636770073}, "source.adventureworks_dw.querry_adventureworks20211025.production_productsubcategory": {"fqn": ["adventureworks_dw", "adventureworks", "querry_adventureworks20211025", "production_productsubcategory"], "database": "woven-passkey-328019", "schema": "querry_adventureworks20211025", "unique_id": "source.adventureworks_dw.querry_adventureworks20211025.production_productsubcategory", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "models/adventureworks/sources.yml", "original_file_path": "models/adventureworks/sources.yml", "name": "production_productsubcategory", "source_name": "querry_adventureworks20211025", "source_description": "", "loader": "", "identifier": "production_productsubcategory", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Essa \u00e9 a tabela product_subcategory do production", "columns": {"productsubcategoryid": {"name": "productsubcategoryid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`woven-passkey-328019`.`querry_adventureworks20211025`.`production_productsubcategory`", "created_at": 1636770073}, "source.adventureworks_dw.querry_adventureworks20211025.purchasing_productvendor": {"fqn": ["adventureworks_dw", "adventureworks", "querry_adventureworks20211025", "purchasing_productvendor"], "database": "woven-passkey-328019", "schema": "querry_adventureworks20211025", "unique_id": "source.adventureworks_dw.querry_adventureworks20211025.purchasing_productvendor", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "models/adventureworks/sources.yml", "original_file_path": "models/adventureworks/sources.yml", "name": "purchasing_productvendor", "source_name": "querry_adventureworks20211025", "source_description": "", "loader": "", "identifier": "purchasing_productvendor", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Essa \u00e9 a tabela product_vendor do purchasing", "columns": {"productid": {"name": "productid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "businessentityid": {"name": "businessentityid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`woven-passkey-328019`.`querry_adventureworks20211025`.`purchasing_productvendor`", "created_at": 1636770073}, "source.adventureworks_dw.querry_adventureworks20211025.purchasing_shipmethod": {"fqn": ["adventureworks_dw", "adventureworks", "querry_adventureworks20211025", "purchasing_shipmethod"], "database": "woven-passkey-328019", "schema": "querry_adventureworks20211025", "unique_id": "source.adventureworks_dw.querry_adventureworks20211025.purchasing_shipmethod", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "models/adventureworks/sources.yml", "original_file_path": "models/adventureworks/sources.yml", "name": "purchasing_shipmethod", "source_name": "querry_adventureworks20211025", "source_description": "", "loader": "", "identifier": "purchasing_shipmethod", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Essa \u00e9 a tabela ship_method do purchasing", "columns": {"shipmethodid": {"name": "shipmethodid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`woven-passkey-328019`.`querry_adventureworks20211025`.`purchasing_shipmethod`", "created_at": 1636770073}, "source.adventureworks_dw.querry_adventureworks20211025.purchasing_vendor": {"fqn": ["adventureworks_dw", "adventureworks", "querry_adventureworks20211025", "purchasing_vendor"], "database": "woven-passkey-328019", "schema": "querry_adventureworks20211025", "unique_id": "source.adventureworks_dw.querry_adventureworks20211025.purchasing_vendor", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "models/adventureworks/sources.yml", "original_file_path": "models/adventureworks/sources.yml", "name": "purchasing_vendor", "source_name": "querry_adventureworks20211025", "source_description": "", "loader": "", "identifier": "purchasing_vendor", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Essa \u00e9 a tabela vendor do purchasing", "columns": {"businessentityid": {"name": "businessentityid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`woven-passkey-328019`.`querry_adventureworks20211025`.`purchasing_vendor`", "created_at": 1636770073}, "source.adventureworks_dw.querry_adventureworks20211025.sales_creditcard": {"fqn": ["adventureworks_dw", "adventureworks", "querry_adventureworks20211025", "sales_creditcard"], "database": "woven-passkey-328019", "schema": "querry_adventureworks20211025", "unique_id": "source.adventureworks_dw.querry_adventureworks20211025.sales_creditcard", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "models/adventureworks/sources.yml", "original_file_path": "models/adventureworks/sources.yml", "name": "sales_creditcard", "source_name": "querry_adventureworks20211025", "source_description": "", "loader": "", "identifier": "sales_creditcard", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Essa \u00e9 a tabela credit_card do sales", "columns": {"creditcardid": {"name": "creditcardid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`woven-passkey-328019`.`querry_adventureworks20211025`.`sales_creditcard`", "created_at": 1636770073}, "source.adventureworks_dw.querry_adventureworks20211025.sales_customer": {"fqn": ["adventureworks_dw", "adventureworks", "querry_adventureworks20211025", "sales_customer"], "database": "woven-passkey-328019", "schema": "querry_adventureworks20211025", "unique_id": "source.adventureworks_dw.querry_adventureworks20211025.sales_customer", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "models/adventureworks/sources.yml", "original_file_path": "models/adventureworks/sources.yml", "name": "sales_customer", "source_name": "querry_adventureworks20211025", "source_description": "", "loader": "", "identifier": "sales_customer", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Essa \u00e9 a tabela customer do sales", "columns": {"customerid": {"name": "customerid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`woven-passkey-328019`.`querry_adventureworks20211025`.`sales_customer`", "created_at": 1636770073}, "source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderdetail": {"fqn": ["adventureworks_dw", "adventureworks", "querry_adventureworks20211025", "sales_salesorderdetail"], "database": "woven-passkey-328019", "schema": "querry_adventureworks20211025", "unique_id": "source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderdetail", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "models/adventureworks/sources.yml", "original_file_path": "models/adventureworks/sources.yml", "name": "sales_salesorderdetail", "source_name": "querry_adventureworks20211025", "source_description": "", "loader": "", "identifier": "sales_salesorderdetail", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Essa \u00e9 a tabela sales_order_detail do sales", "columns": {"salesorderid": {"name": "salesorderid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salesorderdetailid": {"name": "salesorderdetailid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`woven-passkey-328019`.`querry_adventureworks20211025`.`sales_salesorderdetail`", "created_at": 1636770073}, "source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderheader": {"fqn": ["adventureworks_dw", "adventureworks", "querry_adventureworks20211025", "sales_salesorderheader"], "database": "woven-passkey-328019", "schema": "querry_adventureworks20211025", "unique_id": "source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderheader", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "models/adventureworks/sources.yml", "original_file_path": "models/adventureworks/sources.yml", "name": "sales_salesorderheader", "source_name": "querry_adventureworks20211025", "source_description": "", "loader": "", "identifier": "sales_salesorderheader", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Essa \u00e9 a tabela sales_order_header do sales", "columns": {"salesorderid": {"name": "salesorderid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`woven-passkey-328019`.`querry_adventureworks20211025`.`sales_salesorderheader`", "created_at": 1636770073}, "source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderheadersalesreason": {"fqn": ["adventureworks_dw", "adventureworks", "querry_adventureworks20211025", "sales_salesorderheadersalesreason"], "database": "woven-passkey-328019", "schema": "querry_adventureworks20211025", "unique_id": "source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderheadersalesreason", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "models/adventureworks/sources.yml", "original_file_path": "models/adventureworks/sources.yml", "name": "sales_salesorderheadersalesreason", "source_name": "querry_adventureworks20211025", "source_description": "", "loader": "", "identifier": "sales_salesorderheadersalesreason", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Essa \u00e9 a tabela sales_order_header_sales_reason do sales", "columns": {"salesorderid": {"name": "salesorderid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salesreasonid": {"name": "salesreasonid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`woven-passkey-328019`.`querry_adventureworks20211025`.`sales_salesorderheadersalesreason`", "created_at": 1636770073}, "source.adventureworks_dw.querry_adventureworks20211025.sales_salesreason": {"fqn": ["adventureworks_dw", "adventureworks", "querry_adventureworks20211025", "sales_salesreason"], "database": "woven-passkey-328019", "schema": "querry_adventureworks20211025", "unique_id": "source.adventureworks_dw.querry_adventureworks20211025.sales_salesreason", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "models/adventureworks/sources.yml", "original_file_path": "models/adventureworks/sources.yml", "name": "sales_salesreason", "source_name": "querry_adventureworks20211025", "source_description": "", "loader": "", "identifier": "sales_salesreason", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Essa \u00e9 a tabela sales_reason do sales", "columns": {"salesreasonid": {"name": "salesreasonid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`woven-passkey-328019`.`querry_adventureworks20211025`.`sales_salesreason`", "created_at": 1636770073}, "source.adventureworks_dw.querry_adventureworks20211025.sales_store": {"fqn": ["adventureworks_dw", "adventureworks", "querry_adventureworks20211025", "sales_store"], "database": "woven-passkey-328019", "schema": "querry_adventureworks20211025", "unique_id": "source.adventureworks_dw.querry_adventureworks20211025.sales_store", "package_name": "adventureworks_dw", "root_path": "/usr/src/develop/user-39236/environment-46606/repository-38011", "path": "models/adventureworks/sources.yml", "original_file_path": "models/adventureworks/sources.yml", "name": "sales_store", "source_name": "querry_adventureworks20211025", "source_description": "", "loader": "", "identifier": "sales_store", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Essa \u00e9 a tabela store do sales", "columns": {"businessentityid": {"name": "businessentityid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`woven-passkey-328019`.`querry_adventureworks20211025`.`sales_store`", "created_at": 1636770073}}, "macros": {"macro.dbt_bigquery.bigquery__get_catalog": {"unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.partition_by": {"unique_id": "macro.dbt_bigquery.partition_by", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.cluster_by": {"unique_id": "macro.dbt_bigquery.cluster_by", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery_options": {"unique_id": "macro.dbt_bigquery.bigquery_options", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery_table_options": {"unique_id": "macro.dbt_bigquery.bigquery_table_options", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery__create_table_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace table {{ relation }}\n  {{ partition_by(partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n  as (\n    {{ sql }}\n  );\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery_view_options": {"unique_id": "macro.dbt_bigquery.bigquery_view_options", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery__create_view_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  as {{ sql }};\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery__create_schema": {"unique_id": "macro.dbt_bigquery.bigquery__create_schema", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_schema", "macro_sql": "{% macro bigquery__create_schema(relation) -%}\n  {{ adapter.create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery__drop_schema": {"unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery__drop_relation": {"unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery__current_timestamp": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  CURRENT_TIMESTAMP()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery__list_schemas": {"unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery__persist_docs": {"unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery__rename_relation": {"unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n  \n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n  \n  {%- endset -%}\n  \n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery__alter_column_type": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.date_sharded_table": {"unique_id": "macro.dbt_bigquery.date_sharded_table", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.grant_access_to": {"unique_id": "macro.dbt_bigquery.grant_access_to", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.get_partitions_metadata": {"unique_id": "macro.dbt_bigquery.get_partitions_metadata", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.make_date_partitioned_table": {"unique_id": "macro.dbt_bigquery.make_date_partitioned_table", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "make_date_partitioned_table", "macro_sql": "{% macro make_date_partitioned_table(model, relation, dates, should_create, verbose=False) %}\n\n  {% if should_create %}\n      {{ adapter.make_date_partitioned_table(relation) }}\n  {% endif %}\n\n  {% for date in dates %}\n    {% set date = (date | string) %}\n    {% if verbose %}\n        {% set table_start_time = modules.datetime.datetime.now().strftime(\"%H:%M:%S\") %}\n        {{ log(table_start_time ~ ' | -> Running for day ' ~ date, info=True) }}\n    {% endif %}\n\n    {% set fixed_sql = model['compiled_sql'] | replace('[DBT__PARTITION_DATE]', date) %}\n    {% set _ = adapter.execute_model(model, 'table', fixed_sql, decorator=date) %}\n  {% endfor %}\n\n  {% set num_days = dates | length %}\n  {% if num_days == 1 %}\n      {% set result_str = 'CREATED 1 PARTITION' %}\n  {% else %}\n      {% set result_str = 'CREATED ' ~ num_days ~ ' PARTITIONS' %}\n  {% endif %}\n\n  {{ store_result('main', response=result_str) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.materialization_table_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery' -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n  {%- set verbose = config.get('verbose', False) -%}\n\n  {# partitions: iterate over each partition, running a separate query in a for-loop #}\n  {%- set partitions = config.get('partitions') -%}\n\n  {% if partitions %}\n      {% if partitions is number or partitions is string %}\n        {% set partitions = [(partitions | string)] %}\n      {% endif %}\n\n      {% if partitions is not iterable %}\n        {{ exceptions.raise_compiler_error(\"Provided `partitions` configuration is not a list. Got: \" ~ partitions, model) }}\n      {% endif %}\n  {% endif %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      Since dbt uses WRITE_TRUNCATE mode for tables, we only need to drop this thing\n      if it is not a table. If it _is_ already a table, then we can overwrite it without downtime\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% if partitions %}\n    {# Create the dp-table if 1. it does not exist or 2. it existed, but we just dropped it #}\n    {%- set should_create = (old_relation is none or exists_not_as_table) -%}\n    {{ make_date_partitioned_table(model, target_relation, partitions, should_create, verbose) }}\n  {% else %}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- set cluster_by = config.get('cluster_by', none) -%}\n    {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n      {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n      {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    {% call statement('main') -%}\n      {{ create_table_as(False, target_relation, sql) }}\n    {% endcall -%}\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt_bigquery.make_date_partitioned_table", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery__create_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.materialization_view_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery__create_columns": {"unique_id": "macro.dbt_bigquery.bigquery__create_columns", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bigquery__post_snapshot": {"unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bq_insert_overwrite": {"unique_id": "macro.dbt_bigquery.bq_insert_overwrite", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_insert_overwrite", "macro_sql": "{% macro bq_insert_overwrite(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type }}>;\n      declare _dbt_max_partition {{ partition_by.data_type }} default (\n          select max({{ partition_by.field }}) from {{ this }}\n          where {{ partition_by.field }} is not null\n      );\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        -- 1. create a temp table\n        {{ create_table_as(True, tmp_relation, sql) }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      {#\n        TODO: include_sql_header is a hack; consider a better approach that includes\n              the sql_header at the materialization-level instead\n      #}\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=false) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n    {%- endset %}\n    {% if partition_by is none %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, on_schema_change\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {%- set source_sql -%}\n      {%- if tmp_relation_exists -%}\n        (\n          select * from {{ tmp_relation }}\n        )\n      {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n          {{sql}}\n        )\n      {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery' -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% else %}\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' %} {# Check first, since otherwise we may not build a temp table #}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% set tmp_relation_exists = true %}\n      {% do process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n    \n    {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt_bigquery.materialization_copy_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "name": "materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter's copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "materialization_test_default", "macro_sql": "\n\n{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.common_get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n  \n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change != 'ignore' %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {% do process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.incremental_upsert", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    \n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/where_subquery.sql", "original_file_path": "macros/etc/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/where_subquery.sql", "original_file_path": "macros/etc/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if remove_columns | length > 0 }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636770072}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {}, "selectors": {}, "disabled": [], "parent_map": {"model.adventureworks_dw.dim_production": ["model.adventureworks_dw.stg_production_product", "model.adventureworks_dw.stg_production_productcategory", "model.adventureworks_dw.stg_production_productsubcategory"], "model.adventureworks_dw.dim_customer": ["model.adventureworks_dw.stg_person_person", "model.adventureworks_dw.stg_sales_customer", "model.adventureworks_dw.stg_sales_store"], "model.adventureworks_dw.fact_sales": ["model.adventureworks_dw.dim_customer", "model.adventureworks_dw.dim_employee", "model.adventureworks_dw.dim_production", "model.adventureworks_dw.dim_purchasing", "model.adventureworks_dw.stg_person_address", "model.adventureworks_dw.stg_person_countryregion", "model.adventureworks_dw.stg_person_stateprovince", "model.adventureworks_dw.stg_purchasing_shipmethod", "model.adventureworks_dw.stg_sales_creditcard", "model.adventureworks_dw.stg_sales_salesorderdetail", "model.adventureworks_dw.stg_sales_salesorderheader", "model.adventureworks_dw.stg_sales_salesorderheadersalesreason", "model.adventureworks_dw.stg_sales_salesreason"], "model.adventureworks_dw.dim_purchasing": ["model.adventureworks_dw.stg_production_product", "model.adventureworks_dw.stg_purchasing_productvendor", "model.adventureworks_dw.stg_purchasing_vendor"], "model.adventureworks_dw.dim_employee": ["model.adventureworks_dw.stg_humanresources_department", "model.adventureworks_dw.stg_humanresources_employee", "model.adventureworks_dw.stg_humanresources_employeedepartmenthistory", "model.adventureworks_dw.stg_humanresources_employeepayhistory", "model.adventureworks_dw.stg_humanresources_shift", "model.adventureworks_dw.stg_person_person"], "model.adventureworks_dw.stg_production_productcategory": ["source.adventureworks_dw.querry_adventureworks20211025.production_productcategory"], "model.adventureworks_dw.stg_person_stateprovince": ["source.adventureworks_dw.querry_adventureworks20211025.person_stateprovince"], "model.adventureworks_dw.stg_person_person": ["source.adventureworks_dw.querry_adventureworks20211025.person_person"], "model.adventureworks_dw.stg_sales_customer": ["source.adventureworks_dw.querry_adventureworks20211025.sales_customer"], "model.adventureworks_dw.stg_humanresources_employeedepartmenthistory": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_employeedepartmenthistory"], "model.adventureworks_dw.stg_purchasing_vendor": ["source.adventureworks_dw.querry_adventureworks20211025.purchasing_vendor"], "model.adventureworks_dw.stg_humanresources_shift": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_shift"], "model.adventureworks_dw.stg_humanresources_department": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_department"], "model.adventureworks_dw.stg_sales_salesreason": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesreason"], "model.adventureworks_dw.stg_production_product": ["source.adventureworks_dw.querry_adventureworks20211025.production_product"], "model.adventureworks_dw.stg_humanresources_employeepayhistory": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_employeepayhistory"], "model.adventureworks_dw.stg_production_productsubcategory": ["source.adventureworks_dw.querry_adventureworks20211025.production_productsubcategory"], "model.adventureworks_dw.stg_humanresources_employee": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_employee"], "model.adventureworks_dw.stg_person_countryregion": ["source.adventureworks_dw.querry_adventureworks20211025.person_countryregion"], "model.adventureworks_dw.stg_sales_salesorderdetail": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderdetail"], "model.adventureworks_dw.stg_purchasing_productvendor": ["source.adventureworks_dw.querry_adventureworks20211025.purchasing_productvendor"], "model.adventureworks_dw.stg_purchasing_shipmethod": ["source.adventureworks_dw.querry_adventureworks20211025.purchasing_shipmethod"], "model.adventureworks_dw.stg_person_address": ["source.adventureworks_dw.querry_adventureworks20211025.person_address"], "model.adventureworks_dw.stg_sales_creditcard": ["source.adventureworks_dw.querry_adventureworks20211025.sales_creditcard"], "model.adventureworks_dw.stg_sales_salesorderheadersalesreason": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderheadersalesreason"], "model.adventureworks_dw.stg_sales_salesorderheader": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderheader"], "model.adventureworks_dw.stg_sales_store": ["source.adventureworks_dw.querry_adventureworks20211025.sales_store"], "test.adventureworks_dw.not_null_fact_sales_salesorderid.1242b7f3e1": ["model.adventureworks_dw.fact_sales"], "test.adventureworks_dw.unique_dim_humanresources_businessentityid.07ec6a1de8": [], "test.adventureworks_dw.not_null_dim_humanresources_businessentityid.10997c1897": [], "test.adventureworks_dw.unique_dim_person_businessentityid.79bf997e4d": [], "test.adventureworks_dw.not_null_dim_person_businessentityid.cc1735a726": [], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_humanresources_department_departmentid.a1f16fdcae": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_department"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_department_departmentid.95a6eef876": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_department"], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_humanresources_employee_businessentityid.a74e7a281b": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_employee"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_employee_businessentityid.f1991ce9f9": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_employee"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_employeedepartmenthistory_businessentityid.02fe5feba7": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_employeedepartmenthistory"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_employeedepartmenthistory_departmentid.832d9302ca": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_employeedepartmenthistory"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_employeedepartmenthistory_shiftid.2b567eca07": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_employeedepartmenthistory"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_employeepayhistory_businessentityid.17454d2444": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_employeepayhistory"], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_humanresources_shift_shiftid.4c9547903a": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_shift"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_shift_shiftid.3a40bc4af5": ["source.adventureworks_dw.querry_adventureworks20211025.humanresources_shift"], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_person_address_addressid.480c98f7e1": ["source.adventureworks_dw.querry_adventureworks20211025.person_address"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_person_address_addressid.c7fa2f0cab": ["source.adventureworks_dw.querry_adventureworks20211025.person_address"], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_person_countryregion_countryregioncode.22bc8d1ff1": ["source.adventureworks_dw.querry_adventureworks20211025.person_countryregion"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_person_countryregion_countryregioncode.338f01e81b": ["source.adventureworks_dw.querry_adventureworks20211025.person_countryregion"], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_person_person_businessentityid.02058aee10": ["source.adventureworks_dw.querry_adventureworks20211025.person_person"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_person_person_businessentityid.38c4f2e820": ["source.adventureworks_dw.querry_adventureworks20211025.person_person"], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_person_stateprovince_stateprovinceid.d11e50af0e": ["source.adventureworks_dw.querry_adventureworks20211025.person_stateprovince"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_person_stateprovince_stateprovinceid.d04019cec1": ["source.adventureworks_dw.querry_adventureworks20211025.person_stateprovince"], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_production_product_productid.251492adb0": ["source.adventureworks_dw.querry_adventureworks20211025.production_product"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_production_product_productid.80ab87fa65": ["source.adventureworks_dw.querry_adventureworks20211025.production_product"], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_production_productcategory_productcategoryid.4a80454f19": ["source.adventureworks_dw.querry_adventureworks20211025.production_productcategory"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_production_productcategory_productcategoryid.cd5a304bba": ["source.adventureworks_dw.querry_adventureworks20211025.production_productcategory"], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_production_productsubcategory_productsubcategoryid.7d9b2a2a7d": ["source.adventureworks_dw.querry_adventureworks20211025.production_productsubcategory"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_production_productsubcategory_productsubcategoryid.7baf65ee4c": ["source.adventureworks_dw.querry_adventureworks20211025.production_productsubcategory"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_purchasing_productvendor_productid.735caf7f41": ["source.adventureworks_dw.querry_adventureworks20211025.purchasing_productvendor"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_purchasing_productvendor_businessentityid.06980459eb": ["source.adventureworks_dw.querry_adventureworks20211025.purchasing_productvendor"], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_purchasing_shipmethod_shipmethodid.467620674d": ["source.adventureworks_dw.querry_adventureworks20211025.purchasing_shipmethod"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_purchasing_shipmethod_shipmethodid.4d844f187b": ["source.adventureworks_dw.querry_adventureworks20211025.purchasing_shipmethod"], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_purchasing_vendor_businessentityid.78f110344e": ["source.adventureworks_dw.querry_adventureworks20211025.purchasing_vendor"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_purchasing_vendor_businessentityid.9d748c599e": ["source.adventureworks_dw.querry_adventureworks20211025.purchasing_vendor"], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_creditcard_creditcardid.8d9dfd2362": ["source.adventureworks_dw.querry_adventureworks20211025.sales_creditcard"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_creditcard_creditcardid.011d155a1d": ["source.adventureworks_dw.querry_adventureworks20211025.sales_creditcard"], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_customer_customerid.3a1a09ef65": ["source.adventureworks_dw.querry_adventureworks20211025.sales_customer"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_customer_customerid.f0c22f32f1": ["source.adventureworks_dw.querry_adventureworks20211025.sales_customer"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesorderdetail_salesorderid.0c884d96d1": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderdetail"], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_salesorderdetail_salesorderdetailid.c305a43381": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderdetail"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesorderdetail_salesorderdetailid.a9abfb097c": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderdetail"], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_salesorderheader_salesorderid.c8d5206ab4": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderheader"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesorderheader_salesorderid.1a126b8489": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderheader"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesorderheadersalesreason_salesorderid.99ba677e55": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderheadersalesreason"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesorderheadersalesreason_salesreasonid.818995d4d5": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderheadersalesreason"], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_salesreason_salesreasonid.a008252423": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesreason"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesreason_salesreasonid.b638e1f245": ["source.adventureworks_dw.querry_adventureworks20211025.sales_salesreason"], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_store_businessentityid.bf22f4a5d7": ["source.adventureworks_dw.querry_adventureworks20211025.sales_store"], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_store_businessentityid.3ca406c0d6": ["source.adventureworks_dw.querry_adventureworks20211025.sales_store"], "source.adventureworks_dw.querry_adventureworks20211025.humanresources_department": [], "source.adventureworks_dw.querry_adventureworks20211025.humanresources_employee": [], "source.adventureworks_dw.querry_adventureworks20211025.humanresources_employeedepartmenthistory": [], "source.adventureworks_dw.querry_adventureworks20211025.humanresources_employeepayhistory": [], "source.adventureworks_dw.querry_adventureworks20211025.humanresources_shift": [], "source.adventureworks_dw.querry_adventureworks20211025.person_address": [], "source.adventureworks_dw.querry_adventureworks20211025.person_countryregion": [], "source.adventureworks_dw.querry_adventureworks20211025.person_person": [], "source.adventureworks_dw.querry_adventureworks20211025.person_stateprovince": [], "source.adventureworks_dw.querry_adventureworks20211025.production_product": [], "source.adventureworks_dw.querry_adventureworks20211025.production_productcategory": [], "source.adventureworks_dw.querry_adventureworks20211025.production_productsubcategory": [], "source.adventureworks_dw.querry_adventureworks20211025.purchasing_productvendor": [], "source.adventureworks_dw.querry_adventureworks20211025.purchasing_shipmethod": [], "source.adventureworks_dw.querry_adventureworks20211025.purchasing_vendor": [], "source.adventureworks_dw.querry_adventureworks20211025.sales_creditcard": [], "source.adventureworks_dw.querry_adventureworks20211025.sales_customer": [], "source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderdetail": [], "source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderheader": [], "source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderheadersalesreason": [], "source.adventureworks_dw.querry_adventureworks20211025.sales_salesreason": [], "source.adventureworks_dw.querry_adventureworks20211025.sales_store": []}, "child_map": {"model.adventureworks_dw.dim_production": ["model.adventureworks_dw.fact_sales"], "model.adventureworks_dw.dim_customer": ["model.adventureworks_dw.fact_sales"], "model.adventureworks_dw.fact_sales": ["test.adventureworks_dw.not_null_fact_sales_salesorderid.1242b7f3e1"], "model.adventureworks_dw.dim_purchasing": ["model.adventureworks_dw.fact_sales"], "model.adventureworks_dw.dim_employee": ["model.adventureworks_dw.fact_sales"], "model.adventureworks_dw.stg_production_productcategory": ["model.adventureworks_dw.dim_production"], "model.adventureworks_dw.stg_person_stateprovince": ["model.adventureworks_dw.fact_sales"], "model.adventureworks_dw.stg_person_person": ["model.adventureworks_dw.dim_customer", "model.adventureworks_dw.dim_employee"], "model.adventureworks_dw.stg_sales_customer": ["model.adventureworks_dw.dim_customer"], "model.adventureworks_dw.stg_humanresources_employeedepartmenthistory": ["model.adventureworks_dw.dim_employee"], "model.adventureworks_dw.stg_purchasing_vendor": ["model.adventureworks_dw.dim_purchasing"], "model.adventureworks_dw.stg_humanresources_shift": ["model.adventureworks_dw.dim_employee"], "model.adventureworks_dw.stg_humanresources_department": ["model.adventureworks_dw.dim_employee"], "model.adventureworks_dw.stg_sales_salesreason": ["model.adventureworks_dw.fact_sales"], "model.adventureworks_dw.stg_production_product": ["model.adventureworks_dw.dim_production", "model.adventureworks_dw.dim_purchasing"], "model.adventureworks_dw.stg_humanresources_employeepayhistory": ["model.adventureworks_dw.dim_employee"], "model.adventureworks_dw.stg_production_productsubcategory": ["model.adventureworks_dw.dim_production"], "model.adventureworks_dw.stg_humanresources_employee": ["model.adventureworks_dw.dim_employee"], "model.adventureworks_dw.stg_person_countryregion": ["model.adventureworks_dw.fact_sales"], "model.adventureworks_dw.stg_sales_salesorderdetail": ["model.adventureworks_dw.fact_sales"], "model.adventureworks_dw.stg_purchasing_productvendor": ["model.adventureworks_dw.dim_purchasing"], "model.adventureworks_dw.stg_purchasing_shipmethod": ["model.adventureworks_dw.fact_sales"], "model.adventureworks_dw.stg_person_address": ["model.adventureworks_dw.fact_sales"], "model.adventureworks_dw.stg_sales_creditcard": ["model.adventureworks_dw.fact_sales"], "model.adventureworks_dw.stg_sales_salesorderheadersalesreason": ["model.adventureworks_dw.fact_sales"], "model.adventureworks_dw.stg_sales_salesorderheader": ["model.adventureworks_dw.fact_sales"], "model.adventureworks_dw.stg_sales_store": ["model.adventureworks_dw.dim_customer"], "test.adventureworks_dw.not_null_fact_sales_salesorderid.1242b7f3e1": [], "test.adventureworks_dw.unique_dim_humanresources_businessentityid.07ec6a1de8": [], "test.adventureworks_dw.not_null_dim_humanresources_businessentityid.10997c1897": [], "test.adventureworks_dw.unique_dim_person_businessentityid.79bf997e4d": [], "test.adventureworks_dw.not_null_dim_person_businessentityid.cc1735a726": [], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_humanresources_department_departmentid.a1f16fdcae": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_department_departmentid.95a6eef876": [], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_humanresources_employee_businessentityid.a74e7a281b": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_employee_businessentityid.f1991ce9f9": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_employeedepartmenthistory_businessentityid.02fe5feba7": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_employeedepartmenthistory_departmentid.832d9302ca": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_employeedepartmenthistory_shiftid.2b567eca07": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_employeepayhistory_businessentityid.17454d2444": [], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_humanresources_shift_shiftid.4c9547903a": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_shift_shiftid.3a40bc4af5": [], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_person_address_addressid.480c98f7e1": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_person_address_addressid.c7fa2f0cab": [], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_person_countryregion_countryregioncode.22bc8d1ff1": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_person_countryregion_countryregioncode.338f01e81b": [], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_person_person_businessentityid.02058aee10": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_person_person_businessentityid.38c4f2e820": [], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_person_stateprovince_stateprovinceid.d11e50af0e": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_person_stateprovince_stateprovinceid.d04019cec1": [], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_production_product_productid.251492adb0": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_production_product_productid.80ab87fa65": [], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_production_productcategory_productcategoryid.4a80454f19": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_production_productcategory_productcategoryid.cd5a304bba": [], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_production_productsubcategory_productsubcategoryid.7d9b2a2a7d": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_production_productsubcategory_productsubcategoryid.7baf65ee4c": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_purchasing_productvendor_productid.735caf7f41": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_purchasing_productvendor_businessentityid.06980459eb": [], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_purchasing_shipmethod_shipmethodid.467620674d": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_purchasing_shipmethod_shipmethodid.4d844f187b": [], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_purchasing_vendor_businessentityid.78f110344e": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_purchasing_vendor_businessentityid.9d748c599e": [], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_creditcard_creditcardid.8d9dfd2362": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_creditcard_creditcardid.011d155a1d": [], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_customer_customerid.3a1a09ef65": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_customer_customerid.f0c22f32f1": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesorderdetail_salesorderid.0c884d96d1": [], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_salesorderdetail_salesorderdetailid.c305a43381": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesorderdetail_salesorderdetailid.a9abfb097c": [], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_salesorderheader_salesorderid.c8d5206ab4": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesorderheader_salesorderid.1a126b8489": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesorderheadersalesreason_salesorderid.99ba677e55": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesorderheadersalesreason_salesreasonid.818995d4d5": [], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_salesreason_salesreasonid.a008252423": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesreason_salesreasonid.b638e1f245": [], "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_store_businessentityid.bf22f4a5d7": [], "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_store_businessentityid.3ca406c0d6": [], "source.adventureworks_dw.querry_adventureworks20211025.humanresources_department": ["model.adventureworks_dw.stg_humanresources_department", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_department_departmentid.95a6eef876", "test.adventureworks_dw.source_unique_querry_adventureworks20211025_humanresources_department_departmentid.a1f16fdcae"], "source.adventureworks_dw.querry_adventureworks20211025.humanresources_employee": ["model.adventureworks_dw.stg_humanresources_employee", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_employee_businessentityid.f1991ce9f9", "test.adventureworks_dw.source_unique_querry_adventureworks20211025_humanresources_employee_businessentityid.a74e7a281b"], "source.adventureworks_dw.querry_adventureworks20211025.humanresources_employeedepartmenthistory": ["model.adventureworks_dw.stg_humanresources_employeedepartmenthistory", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_employeedepartmenthistory_businessentityid.02fe5feba7", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_employeedepartmenthistory_departmentid.832d9302ca", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_employeedepartmenthistory_shiftid.2b567eca07"], "source.adventureworks_dw.querry_adventureworks20211025.humanresources_employeepayhistory": ["model.adventureworks_dw.stg_humanresources_employeepayhistory", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_employeepayhistory_businessentityid.17454d2444"], "source.adventureworks_dw.querry_adventureworks20211025.humanresources_shift": ["model.adventureworks_dw.stg_humanresources_shift", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_humanresources_shift_shiftid.3a40bc4af5", "test.adventureworks_dw.source_unique_querry_adventureworks20211025_humanresources_shift_shiftid.4c9547903a"], "source.adventureworks_dw.querry_adventureworks20211025.person_address": ["model.adventureworks_dw.stg_person_address", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_person_address_addressid.c7fa2f0cab", "test.adventureworks_dw.source_unique_querry_adventureworks20211025_person_address_addressid.480c98f7e1"], "source.adventureworks_dw.querry_adventureworks20211025.person_countryregion": ["model.adventureworks_dw.stg_person_countryregion", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_person_countryregion_countryregioncode.338f01e81b", "test.adventureworks_dw.source_unique_querry_adventureworks20211025_person_countryregion_countryregioncode.22bc8d1ff1"], "source.adventureworks_dw.querry_adventureworks20211025.person_person": ["model.adventureworks_dw.stg_person_person", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_person_person_businessentityid.38c4f2e820", "test.adventureworks_dw.source_unique_querry_adventureworks20211025_person_person_businessentityid.02058aee10"], "source.adventureworks_dw.querry_adventureworks20211025.person_stateprovince": ["model.adventureworks_dw.stg_person_stateprovince", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_person_stateprovince_stateprovinceid.d04019cec1", "test.adventureworks_dw.source_unique_querry_adventureworks20211025_person_stateprovince_stateprovinceid.d11e50af0e"], "source.adventureworks_dw.querry_adventureworks20211025.production_product": ["model.adventureworks_dw.stg_production_product", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_production_product_productid.80ab87fa65", "test.adventureworks_dw.source_unique_querry_adventureworks20211025_production_product_productid.251492adb0"], "source.adventureworks_dw.querry_adventureworks20211025.production_productcategory": ["model.adventureworks_dw.stg_production_productcategory", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_production_productcategory_productcategoryid.cd5a304bba", "test.adventureworks_dw.source_unique_querry_adventureworks20211025_production_productcategory_productcategoryid.4a80454f19"], "source.adventureworks_dw.querry_adventureworks20211025.production_productsubcategory": ["model.adventureworks_dw.stg_production_productsubcategory", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_production_productsubcategory_productsubcategoryid.7baf65ee4c", "test.adventureworks_dw.source_unique_querry_adventureworks20211025_production_productsubcategory_productsubcategoryid.7d9b2a2a7d"], "source.adventureworks_dw.querry_adventureworks20211025.purchasing_productvendor": ["model.adventureworks_dw.stg_purchasing_productvendor", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_purchasing_productvendor_businessentityid.06980459eb", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_purchasing_productvendor_productid.735caf7f41"], "source.adventureworks_dw.querry_adventureworks20211025.purchasing_shipmethod": ["model.adventureworks_dw.stg_purchasing_shipmethod", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_purchasing_shipmethod_shipmethodid.4d844f187b", "test.adventureworks_dw.source_unique_querry_adventureworks20211025_purchasing_shipmethod_shipmethodid.467620674d"], "source.adventureworks_dw.querry_adventureworks20211025.purchasing_vendor": ["model.adventureworks_dw.stg_purchasing_vendor", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_purchasing_vendor_businessentityid.9d748c599e", "test.adventureworks_dw.source_unique_querry_adventureworks20211025_purchasing_vendor_businessentityid.78f110344e"], "source.adventureworks_dw.querry_adventureworks20211025.sales_creditcard": ["model.adventureworks_dw.stg_sales_creditcard", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_creditcard_creditcardid.011d155a1d", "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_creditcard_creditcardid.8d9dfd2362"], "source.adventureworks_dw.querry_adventureworks20211025.sales_customer": ["model.adventureworks_dw.stg_sales_customer", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_customer_customerid.f0c22f32f1", "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_customer_customerid.3a1a09ef65"], "source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderdetail": ["model.adventureworks_dw.stg_sales_salesorderdetail", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesorderdetail_salesorderdetailid.a9abfb097c", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesorderdetail_salesorderid.0c884d96d1", "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_salesorderdetail_salesorderdetailid.c305a43381"], "source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderheader": ["model.adventureworks_dw.stg_sales_salesorderheader", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesorderheader_salesorderid.1a126b8489", "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_salesorderheader_salesorderid.c8d5206ab4"], "source.adventureworks_dw.querry_adventureworks20211025.sales_salesorderheadersalesreason": ["model.adventureworks_dw.stg_sales_salesorderheadersalesreason", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesorderheadersalesreason_salesorderid.99ba677e55", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesorderheadersalesreason_salesreasonid.818995d4d5"], "source.adventureworks_dw.querry_adventureworks20211025.sales_salesreason": ["model.adventureworks_dw.stg_sales_salesreason", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_salesreason_salesreasonid.b638e1f245", "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_salesreason_salesreasonid.a008252423"], "source.adventureworks_dw.querry_adventureworks20211025.sales_store": ["model.adventureworks_dw.stg_sales_store", "test.adventureworks_dw.source_not_null_querry_adventureworks20211025_sales_store_businessentityid.3ca406c0d6", "test.adventureworks_dw.source_unique_querry_adventureworks20211025_sales_store_businessentityid.bf22f4a5d7"]}}